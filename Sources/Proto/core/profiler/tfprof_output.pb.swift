// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/profiler/tfprof_output.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_Tfprof_TFProfTensorProto: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TFProfTensorProto"

  public var dtype: Tensorflow_DataType = .dtInvalid

  /// Flatten tensor in row-major.
  /// Only one of the following array is set.
  public var valueDouble: [Double] = []

  public var valueInt64: [Int64] = []

  public var valueStr: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.dtype)
      case 2: try decoder.decodeRepeatedDoubleField(value: &self.valueDouble)
      case 3: try decoder.decodeRepeatedInt64Field(value: &self.valueInt64)
      case 4: try decoder.decodeRepeatedStringField(value: &self.valueStr)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dtype != .dtInvalid {
      try visitor.visitSingularEnumField(value: self.dtype, fieldNumber: 1)
    }
    if !self.valueDouble.isEmpty {
      try visitor.visitPackedDoubleField(value: self.valueDouble, fieldNumber: 2)
    }
    if !self.valueInt64.isEmpty {
      try visitor.visitPackedInt64Field(value: self.valueInt64, fieldNumber: 3)
    }
    if !self.valueStr.isEmpty {
      try visitor.visitRepeatedStringField(value: self.valueStr, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// A node in TensorFlow graph. Used by scope/graph view.
public struct Tensorflow_Tfprof_GraphNodeProto: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GraphNodeProto"

  /// op name.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// tensor value restored from checkpoint.
  public var tensorValue: Tensorflow_Tfprof_TFProfTensorProto {
    get {return _storage._tensorValue ?? Tensorflow_Tfprof_TFProfTensorProto()}
    set {_uniqueStorage()._tensorValue = newValue}
  }
  /// Returns true if `tensorValue` has been explicitly set.
  public var hasTensorValue: Bool {return _storage._tensorValue != nil}
  /// Clears the value of `tensorValue`. Subsequent reads from it will return its default value.
  public mutating func clearTensorValue() {_storage._tensorValue = nil}

  /// op execution time.
  /// A node can be defined once but run multiple times in tf.while_loop.
  /// the times sum up all different runs.
  public var runCount: Int64 {
    get {return _storage._runCount}
    set {_uniqueStorage()._runCount = newValue}
  }

  public var execMicros: Int64 {
    get {return _storage._execMicros}
    set {_uniqueStorage()._execMicros = newValue}
  }

  public var acceleratorExecMicros: Int64 {
    get {return _storage._acceleratorExecMicros}
    set {_uniqueStorage()._acceleratorExecMicros = newValue}
  }

  public var cpuExecMicros: Int64 {
    get {return _storage._cpuExecMicros}
    set {_uniqueStorage()._cpuExecMicros = newValue}
  }

  /// Total bytes requested by the op.
  public var requestedBytes: Int64 {
    get {return _storage._requestedBytes}
    set {_uniqueStorage()._requestedBytes = newValue}
  }

  /// Max bytes allocated and being used by the op at a point.
  public var peakBytes: Int64 {
    get {return _storage._peakBytes}
    set {_uniqueStorage()._peakBytes = newValue}
  }

  /// Total bytes requested by the op and not released before end.
  public var residualBytes: Int64 {
    get {return _storage._residualBytes}
    set {_uniqueStorage()._residualBytes = newValue}
  }

  /// Total bytes output by the op (not necessarily allocated by the op).
  public var outputBytes: Int64 {
    get {return _storage._outputBytes}
    set {_uniqueStorage()._outputBytes = newValue}
  }

  /// Number of parameters if available.
  public var parameters: Int64 {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  /// Number of float operations.
  public var floatOps: Int64 {
    get {return _storage._floatOps}
    set {_uniqueStorage()._floatOps = newValue}
  }

  /// Device the op is assigned to.
  /// Since an op can fire multiple kernel calls, there can be multiple devices.
  public var devices: [String] {
    get {return _storage._devices}
    set {_uniqueStorage()._devices = newValue}
  }

  /// The following are the aggregated stats from all *accounted* children and
  /// the node itself. The actual children depend on the data structure used.
  /// In graph view, children are inputs recursively.
  /// In scope view, children are nodes under the name scope.
  public var totalDefinitionCount: Int64 {
    get {return _storage._totalDefinitionCount}
    set {_uniqueStorage()._totalDefinitionCount = newValue}
  }

  public var totalRunCount: Int64 {
    get {return _storage._totalRunCount}
    set {_uniqueStorage()._totalRunCount = newValue}
  }

  public var totalExecMicros: Int64 {
    get {return _storage._totalExecMicros}
    set {_uniqueStorage()._totalExecMicros = newValue}
  }

  public var totalAcceleratorExecMicros: Int64 {
    get {return _storage._totalAcceleratorExecMicros}
    set {_uniqueStorage()._totalAcceleratorExecMicros = newValue}
  }

  public var totalCpuExecMicros: Int64 {
    get {return _storage._totalCpuExecMicros}
    set {_uniqueStorage()._totalCpuExecMicros = newValue}
  }

  public var totalRequestedBytes: Int64 {
    get {return _storage._totalRequestedBytes}
    set {_uniqueStorage()._totalRequestedBytes = newValue}
  }

  public var totalPeakBytes: Int64 {
    get {return _storage._totalPeakBytes}
    set {_uniqueStorage()._totalPeakBytes = newValue}
  }

  public var totalResidualBytes: Int64 {
    get {return _storage._totalResidualBytes}
    set {_uniqueStorage()._totalResidualBytes = newValue}
  }

  public var totalOutputBytes: Int64 {
    get {return _storage._totalOutputBytes}
    set {_uniqueStorage()._totalOutputBytes = newValue}
  }

  public var totalParameters: Int64 {
    get {return _storage._totalParameters}
    set {_uniqueStorage()._totalParameters = newValue}
  }

  public var totalFloatOps: Int64 {
    get {return _storage._totalFloatOps}
    set {_uniqueStorage()._totalFloatOps = newValue}
  }

  /// shape information, if available.
  /// TODO(xpan): Why is this repeated?
  public var shapes: [Tensorflow_TensorShapeProto] {
    get {return _storage._shapes}
    set {_uniqueStorage()._shapes = newValue}
  }

  public var inputShapes: Dictionary<Int32,Tensorflow_TensorShapeProto> {
    get {return _storage._inputShapes}
    set {_uniqueStorage()._inputShapes = newValue}
  }

  /// Descendants of the graph. The actual descendants depend on the data
  /// structure used (scope, graph).
  public var children: [Tensorflow_Tfprof_GraphNodeProto] {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._execMicros)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._requestedBytes)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._parameters)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalExecMicros)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._totalRequestedBytes)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._totalParameters)
        case 10: try decoder.decodeRepeatedStringField(value: &_storage._devices)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._shapes)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._children)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._floatOps)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._totalFloatOps)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._tensorValue)
        case 16: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Tensorflow_TensorShapeProto>.self, value: &_storage._inputShapes)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._acceleratorExecMicros)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._cpuExecMicros)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._totalAcceleratorExecMicros)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._totalCpuExecMicros)
        case 21: try decoder.decodeSingularInt64Field(value: &_storage._runCount)
        case 22: try decoder.decodeSingularInt64Field(value: &_storage._totalRunCount)
        case 23: try decoder.decodeSingularInt64Field(value: &_storage._totalDefinitionCount)
        case 24: try decoder.decodeSingularInt64Field(value: &_storage._peakBytes)
        case 25: try decoder.decodeSingularInt64Field(value: &_storage._residualBytes)
        case 26: try decoder.decodeSingularInt64Field(value: &_storage._outputBytes)
        case 27: try decoder.decodeSingularInt64Field(value: &_storage._totalPeakBytes)
        case 28: try decoder.decodeSingularInt64Field(value: &_storage._totalResidualBytes)
        case 29: try decoder.decodeSingularInt64Field(value: &_storage._totalOutputBytes)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if _storage._execMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._execMicros, fieldNumber: 2)
      }
      if _storage._requestedBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._requestedBytes, fieldNumber: 3)
      }
      if _storage._parameters != 0 {
        try visitor.visitSingularInt64Field(value: _storage._parameters, fieldNumber: 4)
      }
      if _storage._totalExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalExecMicros, fieldNumber: 6)
      }
      if _storage._totalRequestedBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalRequestedBytes, fieldNumber: 7)
      }
      if _storage._totalParameters != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalParameters, fieldNumber: 8)
      }
      if !_storage._devices.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._devices, fieldNumber: 10)
      }
      if !_storage._shapes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._shapes, fieldNumber: 11)
      }
      if !_storage._children.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._children, fieldNumber: 12)
      }
      if _storage._floatOps != 0 {
        try visitor.visitSingularInt64Field(value: _storage._floatOps, fieldNumber: 13)
      }
      if _storage._totalFloatOps != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalFloatOps, fieldNumber: 14)
      }
      if let v = _storage._tensorValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if !_storage._inputShapes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Tensorflow_TensorShapeProto>.self, value: _storage._inputShapes, fieldNumber: 16)
      }
      if _storage._acceleratorExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._acceleratorExecMicros, fieldNumber: 17)
      }
      if _storage._cpuExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cpuExecMicros, fieldNumber: 18)
      }
      if _storage._totalAcceleratorExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalAcceleratorExecMicros, fieldNumber: 19)
      }
      if _storage._totalCpuExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalCpuExecMicros, fieldNumber: 20)
      }
      if _storage._runCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._runCount, fieldNumber: 21)
      }
      if _storage._totalRunCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalRunCount, fieldNumber: 22)
      }
      if _storage._totalDefinitionCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalDefinitionCount, fieldNumber: 23)
      }
      if _storage._peakBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._peakBytes, fieldNumber: 24)
      }
      if _storage._residualBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._residualBytes, fieldNumber: 25)
      }
      if _storage._outputBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._outputBytes, fieldNumber: 26)
      }
      if _storage._totalPeakBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalPeakBytes, fieldNumber: 27)
      }
      if _storage._totalResidualBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalResidualBytes, fieldNumber: 28)
      }
      if _storage._totalOutputBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalOutputBytes, fieldNumber: 29)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A node that groups multiple GraphNodeProto.
/// Depending on the 'view', the semantics of the TFmultiGraphNodeProto
/// is different:
/// code view: A node groups all TensorFlow graph nodes created by the
///            Python code.
/// op view:   A node groups all TensorFlow graph nodes that are of type
///            of the op (e.g. MatMul, Conv2D).
public struct Tensorflow_Tfprof_MultiGraphNodeProto: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MultiGraphNodeProto"

  /// Name of the node.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// code execution time.
  public var execMicros: Int64 {
    get {return _storage._execMicros}
    set {_uniqueStorage()._execMicros = newValue}
  }

  public var acceleratorExecMicros: Int64 {
    get {return _storage._acceleratorExecMicros}
    set {_uniqueStorage()._acceleratorExecMicros = newValue}
  }

  public var cpuExecMicros: Int64 {
    get {return _storage._cpuExecMicros}
    set {_uniqueStorage()._cpuExecMicros = newValue}
  }

  /// Total requested bytes by the code.
  public var requestedBytes: Int64 {
    get {return _storage._requestedBytes}
    set {_uniqueStorage()._requestedBytes = newValue}
  }

  /// Max bytes allocated and being used by the op at a point.
  public var peakBytes: Int64 {
    get {return _storage._peakBytes}
    set {_uniqueStorage()._peakBytes = newValue}
  }

  /// Total bytes requested by the op and not released before end.
  public var residualBytes: Int64 {
    get {return _storage._residualBytes}
    set {_uniqueStorage()._residualBytes = newValue}
  }

  /// Total bytes output by the op (not necessarily allocated by the op).
  public var outputBytes: Int64 {
    get {return _storage._outputBytes}
    set {_uniqueStorage()._outputBytes = newValue}
  }

  /// Number of parameters if available.
  public var parameters: Int64 {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  /// Number of float operations.
  public var floatOps: Int64 {
    get {return _storage._floatOps}
    set {_uniqueStorage()._floatOps = newValue}
  }

  /// The following are the aggregated stats from descendants.
  /// The actual descendants depend on the data structure used.
  public var totalExecMicros: Int64 {
    get {return _storage._totalExecMicros}
    set {_uniqueStorage()._totalExecMicros = newValue}
  }

  public var totalAcceleratorExecMicros: Int64 {
    get {return _storage._totalAcceleratorExecMicros}
    set {_uniqueStorage()._totalAcceleratorExecMicros = newValue}
  }

  public var totalCpuExecMicros: Int64 {
    get {return _storage._totalCpuExecMicros}
    set {_uniqueStorage()._totalCpuExecMicros = newValue}
  }

  public var totalRequestedBytes: Int64 {
    get {return _storage._totalRequestedBytes}
    set {_uniqueStorage()._totalRequestedBytes = newValue}
  }

  public var totalPeakBytes: Int64 {
    get {return _storage._totalPeakBytes}
    set {_uniqueStorage()._totalPeakBytes = newValue}
  }

  public var totalResidualBytes: Int64 {
    get {return _storage._totalResidualBytes}
    set {_uniqueStorage()._totalResidualBytes = newValue}
  }

  public var totalOutputBytes: Int64 {
    get {return _storage._totalOutputBytes}
    set {_uniqueStorage()._totalOutputBytes = newValue}
  }

  public var totalParameters: Int64 {
    get {return _storage._totalParameters}
    set {_uniqueStorage()._totalParameters = newValue}
  }

  public var totalFloatOps: Int64 {
    get {return _storage._totalFloatOps}
    set {_uniqueStorage()._totalFloatOps = newValue}
  }

  /// TensorFlow graph nodes contained by the MultiGraphNodeProto.
  public var graphNodes: [Tensorflow_Tfprof_GraphNodeProto] {
    get {return _storage._graphNodes}
    set {_uniqueStorage()._graphNodes = newValue}
  }

  /// Descendants of the node. The actual descendants depend on the data
  /// structure used.
  public var children: [Tensorflow_Tfprof_MultiGraphNodeProto] {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._execMicros)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._requestedBytes)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._parameters)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._floatOps)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._totalExecMicros)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._totalRequestedBytes)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._totalParameters)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._totalFloatOps)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._graphNodes)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._children)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._acceleratorExecMicros)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._cpuExecMicros)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._totalAcceleratorExecMicros)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._totalCpuExecMicros)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._peakBytes)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._residualBytes)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._outputBytes)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._totalPeakBytes)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._totalResidualBytes)
        case 21: try decoder.decodeSingularInt64Field(value: &_storage._totalOutputBytes)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if _storage._execMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._execMicros, fieldNumber: 2)
      }
      if _storage._requestedBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._requestedBytes, fieldNumber: 3)
      }
      if _storage._parameters != 0 {
        try visitor.visitSingularInt64Field(value: _storage._parameters, fieldNumber: 4)
      }
      if _storage._floatOps != 0 {
        try visitor.visitSingularInt64Field(value: _storage._floatOps, fieldNumber: 5)
      }
      if _storage._totalExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalExecMicros, fieldNumber: 6)
      }
      if _storage._totalRequestedBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalRequestedBytes, fieldNumber: 7)
      }
      if _storage._totalParameters != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalParameters, fieldNumber: 8)
      }
      if _storage._totalFloatOps != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalFloatOps, fieldNumber: 9)
      }
      if !_storage._graphNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._graphNodes, fieldNumber: 10)
      }
      if !_storage._children.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._children, fieldNumber: 11)
      }
      if _storage._acceleratorExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._acceleratorExecMicros, fieldNumber: 12)
      }
      if _storage._cpuExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cpuExecMicros, fieldNumber: 13)
      }
      if _storage._totalAcceleratorExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalAcceleratorExecMicros, fieldNumber: 14)
      }
      if _storage._totalCpuExecMicros != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalCpuExecMicros, fieldNumber: 15)
      }
      if _storage._peakBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._peakBytes, fieldNumber: 16)
      }
      if _storage._residualBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._residualBytes, fieldNumber: 17)
      }
      if _storage._outputBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._outputBytes, fieldNumber: 18)
      }
      if _storage._totalPeakBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalPeakBytes, fieldNumber: 19)
      }
      if _storage._totalResidualBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalResidualBytes, fieldNumber: 20)
      }
      if _storage._totalOutputBytes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalOutputBytes, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Tfprof_AdviceProto: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AdviceProto"

  /// checker name -> a list of reports from the checker.
  public var checkers: Dictionary<String,Tensorflow_Tfprof_AdviceProto.Checker> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Checker: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Tfprof_AdviceProto.protoMessageName + ".Checker"

    public var reports: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeRepeatedStringField(value: &self.reports)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.reports.isEmpty {
        try visitor.visitRepeatedStringField(value: self.reports, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Tfprof_AdviceProto.Checker>.self, value: &self.checkers)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.checkers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Tfprof_AdviceProto.Checker>.self, value: self.checkers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.tfprof"

extension Tensorflow_Tfprof_TFProfTensorProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dtype"),
    2: .standard(proto: "value_double"),
    3: .standard(proto: "value_int64"),
    4: .standard(proto: "value_str"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_TFProfTensorProto) -> Bool {
    if self.dtype != other.dtype {return false}
    if self.valueDouble != other.valueDouble {return false}
    if self.valueInt64 != other.valueInt64 {return false}
    if self.valueStr != other.valueStr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_GraphNodeProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    15: .standard(proto: "tensor_value"),
    21: .standard(proto: "run_count"),
    2: .standard(proto: "exec_micros"),
    17: .standard(proto: "accelerator_exec_micros"),
    18: .standard(proto: "cpu_exec_micros"),
    3: .standard(proto: "requested_bytes"),
    24: .standard(proto: "peak_bytes"),
    25: .standard(proto: "residual_bytes"),
    26: .standard(proto: "output_bytes"),
    4: .same(proto: "parameters"),
    13: .standard(proto: "float_ops"),
    10: .same(proto: "devices"),
    23: .standard(proto: "total_definition_count"),
    22: .standard(proto: "total_run_count"),
    6: .standard(proto: "total_exec_micros"),
    19: .standard(proto: "total_accelerator_exec_micros"),
    20: .standard(proto: "total_cpu_exec_micros"),
    7: .standard(proto: "total_requested_bytes"),
    27: .standard(proto: "total_peak_bytes"),
    28: .standard(proto: "total_residual_bytes"),
    29: .standard(proto: "total_output_bytes"),
    8: .standard(proto: "total_parameters"),
    14: .standard(proto: "total_float_ops"),
    11: .same(proto: "shapes"),
    16: .standard(proto: "input_shapes"),
    12: .same(proto: "children"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _tensorValue: Tensorflow_Tfprof_TFProfTensorProto? = nil
    var _runCount: Int64 = 0
    var _execMicros: Int64 = 0
    var _acceleratorExecMicros: Int64 = 0
    var _cpuExecMicros: Int64 = 0
    var _requestedBytes: Int64 = 0
    var _peakBytes: Int64 = 0
    var _residualBytes: Int64 = 0
    var _outputBytes: Int64 = 0
    var _parameters: Int64 = 0
    var _floatOps: Int64 = 0
    var _devices: [String] = []
    var _totalDefinitionCount: Int64 = 0
    var _totalRunCount: Int64 = 0
    var _totalExecMicros: Int64 = 0
    var _totalAcceleratorExecMicros: Int64 = 0
    var _totalCpuExecMicros: Int64 = 0
    var _totalRequestedBytes: Int64 = 0
    var _totalPeakBytes: Int64 = 0
    var _totalResidualBytes: Int64 = 0
    var _totalOutputBytes: Int64 = 0
    var _totalParameters: Int64 = 0
    var _totalFloatOps: Int64 = 0
    var _shapes: [Tensorflow_TensorShapeProto] = []
    var _inputShapes: Dictionary<Int32,Tensorflow_TensorShapeProto> = [:]
    var _children: [Tensorflow_Tfprof_GraphNodeProto] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _tensorValue = source._tensorValue
      _runCount = source._runCount
      _execMicros = source._execMicros
      _acceleratorExecMicros = source._acceleratorExecMicros
      _cpuExecMicros = source._cpuExecMicros
      _requestedBytes = source._requestedBytes
      _peakBytes = source._peakBytes
      _residualBytes = source._residualBytes
      _outputBytes = source._outputBytes
      _parameters = source._parameters
      _floatOps = source._floatOps
      _devices = source._devices
      _totalDefinitionCount = source._totalDefinitionCount
      _totalRunCount = source._totalRunCount
      _totalExecMicros = source._totalExecMicros
      _totalAcceleratorExecMicros = source._totalAcceleratorExecMicros
      _totalCpuExecMicros = source._totalCpuExecMicros
      _totalRequestedBytes = source._totalRequestedBytes
      _totalPeakBytes = source._totalPeakBytes
      _totalResidualBytes = source._totalResidualBytes
      _totalOutputBytes = source._totalOutputBytes
      _totalParameters = source._totalParameters
      _totalFloatOps = source._totalFloatOps
      _shapes = source._shapes
      _inputShapes = source._inputShapes
      _children = source._children
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_GraphNodeProto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._tensorValue != other_storage._tensorValue {return false}
        if _storage._runCount != other_storage._runCount {return false}
        if _storage._execMicros != other_storage._execMicros {return false}
        if _storage._acceleratorExecMicros != other_storage._acceleratorExecMicros {return false}
        if _storage._cpuExecMicros != other_storage._cpuExecMicros {return false}
        if _storage._requestedBytes != other_storage._requestedBytes {return false}
        if _storage._peakBytes != other_storage._peakBytes {return false}
        if _storage._residualBytes != other_storage._residualBytes {return false}
        if _storage._outputBytes != other_storage._outputBytes {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._floatOps != other_storage._floatOps {return false}
        if _storage._devices != other_storage._devices {return false}
        if _storage._totalDefinitionCount != other_storage._totalDefinitionCount {return false}
        if _storage._totalRunCount != other_storage._totalRunCount {return false}
        if _storage._totalExecMicros != other_storage._totalExecMicros {return false}
        if _storage._totalAcceleratorExecMicros != other_storage._totalAcceleratorExecMicros {return false}
        if _storage._totalCpuExecMicros != other_storage._totalCpuExecMicros {return false}
        if _storage._totalRequestedBytes != other_storage._totalRequestedBytes {return false}
        if _storage._totalPeakBytes != other_storage._totalPeakBytes {return false}
        if _storage._totalResidualBytes != other_storage._totalResidualBytes {return false}
        if _storage._totalOutputBytes != other_storage._totalOutputBytes {return false}
        if _storage._totalParameters != other_storage._totalParameters {return false}
        if _storage._totalFloatOps != other_storage._totalFloatOps {return false}
        if _storage._shapes != other_storage._shapes {return false}
        if _storage._inputShapes != other_storage._inputShapes {return false}
        if _storage._children != other_storage._children {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_MultiGraphNodeProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "exec_micros"),
    12: .standard(proto: "accelerator_exec_micros"),
    13: .standard(proto: "cpu_exec_micros"),
    3: .standard(proto: "requested_bytes"),
    16: .standard(proto: "peak_bytes"),
    17: .standard(proto: "residual_bytes"),
    18: .standard(proto: "output_bytes"),
    4: .same(proto: "parameters"),
    5: .standard(proto: "float_ops"),
    6: .standard(proto: "total_exec_micros"),
    14: .standard(proto: "total_accelerator_exec_micros"),
    15: .standard(proto: "total_cpu_exec_micros"),
    7: .standard(proto: "total_requested_bytes"),
    19: .standard(proto: "total_peak_bytes"),
    20: .standard(proto: "total_residual_bytes"),
    21: .standard(proto: "total_output_bytes"),
    8: .standard(proto: "total_parameters"),
    9: .standard(proto: "total_float_ops"),
    10: .standard(proto: "graph_nodes"),
    11: .same(proto: "children"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _execMicros: Int64 = 0
    var _acceleratorExecMicros: Int64 = 0
    var _cpuExecMicros: Int64 = 0
    var _requestedBytes: Int64 = 0
    var _peakBytes: Int64 = 0
    var _residualBytes: Int64 = 0
    var _outputBytes: Int64 = 0
    var _parameters: Int64 = 0
    var _floatOps: Int64 = 0
    var _totalExecMicros: Int64 = 0
    var _totalAcceleratorExecMicros: Int64 = 0
    var _totalCpuExecMicros: Int64 = 0
    var _totalRequestedBytes: Int64 = 0
    var _totalPeakBytes: Int64 = 0
    var _totalResidualBytes: Int64 = 0
    var _totalOutputBytes: Int64 = 0
    var _totalParameters: Int64 = 0
    var _totalFloatOps: Int64 = 0
    var _graphNodes: [Tensorflow_Tfprof_GraphNodeProto] = []
    var _children: [Tensorflow_Tfprof_MultiGraphNodeProto] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _execMicros = source._execMicros
      _acceleratorExecMicros = source._acceleratorExecMicros
      _cpuExecMicros = source._cpuExecMicros
      _requestedBytes = source._requestedBytes
      _peakBytes = source._peakBytes
      _residualBytes = source._residualBytes
      _outputBytes = source._outputBytes
      _parameters = source._parameters
      _floatOps = source._floatOps
      _totalExecMicros = source._totalExecMicros
      _totalAcceleratorExecMicros = source._totalAcceleratorExecMicros
      _totalCpuExecMicros = source._totalCpuExecMicros
      _totalRequestedBytes = source._totalRequestedBytes
      _totalPeakBytes = source._totalPeakBytes
      _totalResidualBytes = source._totalResidualBytes
      _totalOutputBytes = source._totalOutputBytes
      _totalParameters = source._totalParameters
      _totalFloatOps = source._totalFloatOps
      _graphNodes = source._graphNodes
      _children = source._children
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_MultiGraphNodeProto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._execMicros != other_storage._execMicros {return false}
        if _storage._acceleratorExecMicros != other_storage._acceleratorExecMicros {return false}
        if _storage._cpuExecMicros != other_storage._cpuExecMicros {return false}
        if _storage._requestedBytes != other_storage._requestedBytes {return false}
        if _storage._peakBytes != other_storage._peakBytes {return false}
        if _storage._residualBytes != other_storage._residualBytes {return false}
        if _storage._outputBytes != other_storage._outputBytes {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._floatOps != other_storage._floatOps {return false}
        if _storage._totalExecMicros != other_storage._totalExecMicros {return false}
        if _storage._totalAcceleratorExecMicros != other_storage._totalAcceleratorExecMicros {return false}
        if _storage._totalCpuExecMicros != other_storage._totalCpuExecMicros {return false}
        if _storage._totalRequestedBytes != other_storage._totalRequestedBytes {return false}
        if _storage._totalPeakBytes != other_storage._totalPeakBytes {return false}
        if _storage._totalResidualBytes != other_storage._totalResidualBytes {return false}
        if _storage._totalOutputBytes != other_storage._totalOutputBytes {return false}
        if _storage._totalParameters != other_storage._totalParameters {return false}
        if _storage._totalFloatOps != other_storage._totalFloatOps {return false}
        if _storage._graphNodes != other_storage._graphNodes {return false}
        if _storage._children != other_storage._children {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_AdviceProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkers"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_AdviceProto) -> Bool {
    if self.checkers != other.checkers {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_AdviceProto.Checker: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "reports"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_AdviceProto.Checker) -> Bool {
    if self.reports != other.reports {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
