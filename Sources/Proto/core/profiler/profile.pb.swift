// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/profiler/profile.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/// This proto intends to match format expected by pprof tool.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_Tfprof_Pprof_Profile: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Profile"

  public var sampleType: [Tensorflow_Tfprof_Pprof_ValueType] {
    get {return _storage._sampleType}
    set {_uniqueStorage()._sampleType = newValue}
  }

  public var sample: [Tensorflow_Tfprof_Pprof_Sample] {
    get {return _storage._sample}
    set {_uniqueStorage()._sample = newValue}
  }

  public var mapping: [Tensorflow_Tfprof_Pprof_Mapping] {
    get {return _storage._mapping}
    set {_uniqueStorage()._mapping = newValue}
  }

  public var location: [Tensorflow_Tfprof_Pprof_Location] {
    get {return _storage._location}
    set {_uniqueStorage()._location = newValue}
  }

  public var function: [Tensorflow_Tfprof_Pprof_Function] {
    get {return _storage._function}
    set {_uniqueStorage()._function = newValue}
  }

  public var stringTable: [String] {
    get {return _storage._stringTable}
    set {_uniqueStorage()._stringTable = newValue}
  }

  public var dropFrames: Int64 {
    get {return _storage._dropFrames}
    set {_uniqueStorage()._dropFrames = newValue}
  }

  public var keepFrames: Int64 {
    get {return _storage._keepFrames}
    set {_uniqueStorage()._keepFrames = newValue}
  }

  public var timeNanos: Int64 {
    get {return _storage._timeNanos}
    set {_uniqueStorage()._timeNanos = newValue}
  }

  public var durationNanos: Int64 {
    get {return _storage._durationNanos}
    set {_uniqueStorage()._durationNanos = newValue}
  }

  public var periodType: Tensorflow_Tfprof_Pprof_ValueType {
    get {return _storage._periodType ?? Tensorflow_Tfprof_Pprof_ValueType()}
    set {_uniqueStorage()._periodType = newValue}
  }
  /// Returns true if `periodType` has been explicitly set.
  public var hasPeriodType: Bool {return _storage._periodType != nil}
  /// Clears the value of `periodType`. Subsequent reads from it will return its default value.
  public mutating func clearPeriodType() {_storage._periodType = nil}

  public var period: Int64 {
    get {return _storage._period}
    set {_uniqueStorage()._period = newValue}
  }

  public var comment: [Int64] {
    get {return _storage._comment}
    set {_uniqueStorage()._comment = newValue}
  }

  public var defaultSampleType: Int64 {
    get {return _storage._defaultSampleType}
    set {_uniqueStorage()._defaultSampleType = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._sampleType)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._sample)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._mapping)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._location)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._function)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._stringTable)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._dropFrames)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._keepFrames)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._timeNanos)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._durationNanos)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._periodType)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._period)
        case 13: try decoder.decodeRepeatedInt64Field(value: &_storage._comment)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._defaultSampleType)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._sampleType.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sampleType, fieldNumber: 1)
      }
      if !_storage._sample.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sample, fieldNumber: 2)
      }
      if !_storage._mapping.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._mapping, fieldNumber: 3)
      }
      if !_storage._location.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._location, fieldNumber: 4)
      }
      if !_storage._function.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._function, fieldNumber: 5)
      }
      if !_storage._stringTable.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._stringTable, fieldNumber: 6)
      }
      if _storage._dropFrames != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dropFrames, fieldNumber: 7)
      }
      if _storage._keepFrames != 0 {
        try visitor.visitSingularInt64Field(value: _storage._keepFrames, fieldNumber: 8)
      }
      if _storage._timeNanos != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeNanos, fieldNumber: 9)
      }
      if _storage._durationNanos != 0 {
        try visitor.visitSingularInt64Field(value: _storage._durationNanos, fieldNumber: 10)
      }
      if let v = _storage._periodType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._period != 0 {
        try visitor.visitSingularInt64Field(value: _storage._period, fieldNumber: 12)
      }
      if !_storage._comment.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._comment, fieldNumber: 13)
      }
      if _storage._defaultSampleType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._defaultSampleType, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Tfprof_Pprof_ValueType: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ValueType"

  public var type: Int64 = 0

  public var unit: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.type)
      case 2: try decoder.decodeSingularInt64Field(value: &self.unit)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt64Field(value: self.type, fieldNumber: 1)
    }
    if self.unit != 0 {
      try visitor.visitSingularInt64Field(value: self.unit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tfprof_Pprof_Sample: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Sample"

  public var locationID: [UInt64] = []

  public var value: [Int64] = []

  public var label: [Tensorflow_Tfprof_Pprof_Label] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.locationID)
      case 2: try decoder.decodeRepeatedInt64Field(value: &self.value)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.label)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locationID.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.locationID, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitPackedInt64Field(value: self.value, fieldNumber: 2)
    }
    if !self.label.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.label, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tfprof_Pprof_Label: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Label"

  public var key: Int64 = 0

  public var str: Int64 = 0

  public var num: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.key)
      case 2: try decoder.decodeSingularInt64Field(value: &self.str)
      case 3: try decoder.decodeSingularInt64Field(value: &self.num)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.key != 0 {
      try visitor.visitSingularInt64Field(value: self.key, fieldNumber: 1)
    }
    if self.str != 0 {
      try visitor.visitSingularInt64Field(value: self.str, fieldNumber: 2)
    }
    if self.num != 0 {
      try visitor.visitSingularInt64Field(value: self.num, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tfprof_Pprof_Mapping: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Mapping"

  public var id: UInt64 = 0

  public var memoryStart: UInt64 = 0

  public var memoryLimit: UInt64 = 0

  public var fileOffset: UInt64 = 0

  public var filename: Int64 = 0

  public var buildID: Int64 = 0

  public var hasFunctions_p: Bool = false

  public var hasFilenames_p: Bool = false

  public var hasLineNumbers_p: Bool = false

  public var hasInlineFrames_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.memoryStart)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.memoryLimit)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.fileOffset)
      case 5: try decoder.decodeSingularInt64Field(value: &self.filename)
      case 6: try decoder.decodeSingularInt64Field(value: &self.buildID)
      case 7: try decoder.decodeSingularBoolField(value: &self.hasFunctions_p)
      case 8: try decoder.decodeSingularBoolField(value: &self.hasFilenames_p)
      case 9: try decoder.decodeSingularBoolField(value: &self.hasLineNumbers_p)
      case 10: try decoder.decodeSingularBoolField(value: &self.hasInlineFrames_p)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.memoryStart != 0 {
      try visitor.visitSingularUInt64Field(value: self.memoryStart, fieldNumber: 2)
    }
    if self.memoryLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.memoryLimit, fieldNumber: 3)
    }
    if self.fileOffset != 0 {
      try visitor.visitSingularUInt64Field(value: self.fileOffset, fieldNumber: 4)
    }
    if self.filename != 0 {
      try visitor.visitSingularInt64Field(value: self.filename, fieldNumber: 5)
    }
    if self.buildID != 0 {
      try visitor.visitSingularInt64Field(value: self.buildID, fieldNumber: 6)
    }
    if self.hasFunctions_p != false {
      try visitor.visitSingularBoolField(value: self.hasFunctions_p, fieldNumber: 7)
    }
    if self.hasFilenames_p != false {
      try visitor.visitSingularBoolField(value: self.hasFilenames_p, fieldNumber: 8)
    }
    if self.hasLineNumbers_p != false {
      try visitor.visitSingularBoolField(value: self.hasLineNumbers_p, fieldNumber: 9)
    }
    if self.hasInlineFrames_p != false {
      try visitor.visitSingularBoolField(value: self.hasInlineFrames_p, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tfprof_Pprof_Location: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Location"

  public var id: UInt64 = 0

  public var mappingID: UInt64 = 0

  public var address: UInt64 = 0

  public var line: [Tensorflow_Tfprof_Pprof_Line] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.mappingID)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.address)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.line)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.mappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.mappingID, fieldNumber: 2)
    }
    if self.address != 0 {
      try visitor.visitSingularUInt64Field(value: self.address, fieldNumber: 3)
    }
    if !self.line.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.line, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tfprof_Pprof_Line: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Line"

  public var functionID: UInt64 = 0

  public var line: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.functionID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.line)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.functionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.functionID, fieldNumber: 1)
    }
    if self.line != 0 {
      try visitor.visitSingularInt64Field(value: self.line, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tfprof_Pprof_Function: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Function"

  public var id: UInt64 = 0

  public var name: Int64 = 0

  public var systemName: Int64 = 0

  public var filename: Int64 = 0

  public var startLine: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.name)
      case 3: try decoder.decodeSingularInt64Field(value: &self.systemName)
      case 4: try decoder.decodeSingularInt64Field(value: &self.filename)
      case 5: try decoder.decodeSingularInt64Field(value: &self.startLine)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.name != 0 {
      try visitor.visitSingularInt64Field(value: self.name, fieldNumber: 2)
    }
    if self.systemName != 0 {
      try visitor.visitSingularInt64Field(value: self.systemName, fieldNumber: 3)
    }
    if self.filename != 0 {
      try visitor.visitSingularInt64Field(value: self.filename, fieldNumber: 4)
    }
    if self.startLine != 0 {
      try visitor.visitSingularInt64Field(value: self.startLine, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.tfprof.pprof"

extension Tensorflow_Tfprof_Pprof_Profile: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sample_type"),
    2: .same(proto: "sample"),
    3: .same(proto: "mapping"),
    4: .same(proto: "location"),
    5: .same(proto: "function"),
    6: .standard(proto: "string_table"),
    7: .standard(proto: "drop_frames"),
    8: .standard(proto: "keep_frames"),
    9: .standard(proto: "time_nanos"),
    10: .standard(proto: "duration_nanos"),
    11: .standard(proto: "period_type"),
    12: .same(proto: "period"),
    13: .same(proto: "comment"),
    14: .standard(proto: "default_sample_type"),
  ]

  fileprivate class _StorageClass {
    var _sampleType: [Tensorflow_Tfprof_Pprof_ValueType] = []
    var _sample: [Tensorflow_Tfprof_Pprof_Sample] = []
    var _mapping: [Tensorflow_Tfprof_Pprof_Mapping] = []
    var _location: [Tensorflow_Tfprof_Pprof_Location] = []
    var _function: [Tensorflow_Tfprof_Pprof_Function] = []
    var _stringTable: [String] = []
    var _dropFrames: Int64 = 0
    var _keepFrames: Int64 = 0
    var _timeNanos: Int64 = 0
    var _durationNanos: Int64 = 0
    var _periodType: Tensorflow_Tfprof_Pprof_ValueType? = nil
    var _period: Int64 = 0
    var _comment: [Int64] = []
    var _defaultSampleType: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sampleType = source._sampleType
      _sample = source._sample
      _mapping = source._mapping
      _location = source._location
      _function = source._function
      _stringTable = source._stringTable
      _dropFrames = source._dropFrames
      _keepFrames = source._keepFrames
      _timeNanos = source._timeNanos
      _durationNanos = source._durationNanos
      _periodType = source._periodType
      _period = source._period
      _comment = source._comment
      _defaultSampleType = source._defaultSampleType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Profile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._sampleType != other_storage._sampleType {return false}
        if _storage._sample != other_storage._sample {return false}
        if _storage._mapping != other_storage._mapping {return false}
        if _storage._location != other_storage._location {return false}
        if _storage._function != other_storage._function {return false}
        if _storage._stringTable != other_storage._stringTable {return false}
        if _storage._dropFrames != other_storage._dropFrames {return false}
        if _storage._keepFrames != other_storage._keepFrames {return false}
        if _storage._timeNanos != other_storage._timeNanos {return false}
        if _storage._durationNanos != other_storage._durationNanos {return false}
        if _storage._periodType != other_storage._periodType {return false}
        if _storage._period != other_storage._period {return false}
        if _storage._comment != other_storage._comment {return false}
        if _storage._defaultSampleType != other_storage._defaultSampleType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_ValueType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "unit"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_ValueType) -> Bool {
    if self.type != other.type {return false}
    if self.unit != other.unit {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_Sample: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "location_id"),
    2: .same(proto: "value"),
    3: .same(proto: "label"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Sample) -> Bool {
    if self.locationID != other.locationID {return false}
    if self.value != other.value {return false}
    if self.label != other.label {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_Label: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "str"),
    3: .same(proto: "num"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Label) -> Bool {
    if self.key != other.key {return false}
    if self.str != other.str {return false}
    if self.num != other.num {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_Mapping: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "memory_start"),
    3: .standard(proto: "memory_limit"),
    4: .standard(proto: "file_offset"),
    5: .same(proto: "filename"),
    6: .standard(proto: "build_id"),
    7: .standard(proto: "has_functions"),
    8: .standard(proto: "has_filenames"),
    9: .standard(proto: "has_line_numbers"),
    10: .standard(proto: "has_inline_frames"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Mapping) -> Bool {
    if self.id != other.id {return false}
    if self.memoryStart != other.memoryStart {return false}
    if self.memoryLimit != other.memoryLimit {return false}
    if self.fileOffset != other.fileOffset {return false}
    if self.filename != other.filename {return false}
    if self.buildID != other.buildID {return false}
    if self.hasFunctions_p != other.hasFunctions_p {return false}
    if self.hasFilenames_p != other.hasFilenames_p {return false}
    if self.hasLineNumbers_p != other.hasLineNumbers_p {return false}
    if self.hasInlineFrames_p != other.hasInlineFrames_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_Location: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "mapping_id"),
    3: .same(proto: "address"),
    4: .same(proto: "line"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Location) -> Bool {
    if self.id != other.id {return false}
    if self.mappingID != other.mappingID {return false}
    if self.address != other.address {return false}
    if self.line != other.line {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_Line: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "function_id"),
    2: .same(proto: "line"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Line) -> Bool {
    if self.functionID != other.functionID {return false}
    if self.line != other.line {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tfprof_Pprof_Function: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "system_name"),
    4: .same(proto: "filename"),
    5: .standard(proto: "start_line"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tfprof_Pprof_Function) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.systemName != other.systemName {return false}
    if self.filename != other.filename {return false}
    if self.startLine != other.startLine {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
