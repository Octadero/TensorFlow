// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/protobuf/eager_service.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_Eager_RemoteTensorHandle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the operation that produced this tensor.
  public var opID: Int64 = 0

  /// The index into the outputs of the operation that produced this tensor.
  public var outputNum: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A proto representation of an eager operation.
public struct Tensorflow_Eager_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A unique identifier for the operation. Set by the client so that the client
  /// can uniquely identify the outputs of the scheduled operation.
  ///
  /// In the initial implementation, sending duplicate IDs has undefined
  /// behaviour, but additional constraints may be placed upon this in the
  /// future.
  public var id: Int64 = 0

  public var name: String = String()

  public var inputs: [Tensorflow_Eager_RemoteTensorHandle] = []

  /// Control Operation IDs that will be respected when ops are re-ordered by
  /// async execution. If async execution (+ op re-ordering) is not enabled, this
  /// should have no effect.
  public var controlOpIds: [Int64] = []

  public var attrs: Dictionary<String,Tensorflow_AttrValue> = [:]

  public var device: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_QueueItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The remote executor should be able to handle either executing ops directly,
  /// or releasing any unused tensor handles, since the tensor lifetime is
  /// maintained by the client.
  public var item: OneOf_Item? {
    get {return _storage._item}
    set {_uniqueStorage()._item = newValue}
  }

  public var handleToDecref: Tensorflow_Eager_RemoteTensorHandle {
    get {
      if case .handleToDecref(let v)? = _storage._item {return v}
      return Tensorflow_Eager_RemoteTensorHandle()
    }
    set {_uniqueStorage()._item = .handleToDecref(newValue)}
  }

  public var operation: Tensorflow_Eager_Operation {
    get {
      if case .operation(let v)? = _storage._item {return v}
      return Tensorflow_Eager_Operation()
    }
    set {_uniqueStorage()._item = .operation(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The remote executor should be able to handle either executing ops directly,
  /// or releasing any unused tensor handles, since the tensor lifetime is
  /// maintained by the client.
  public enum OneOf_Item: Equatable {
    case handleToDecref(Tensorflow_Eager_RemoteTensorHandle)
    case operation(Tensorflow_Eager_Operation)

    public static func ==(lhs: Tensorflow_Eager_QueueItem.OneOf_Item, rhs: Tensorflow_Eager_QueueItem.OneOf_Item) -> Bool {
      switch (lhs, rhs) {
      case (.handleToDecref(let l), .handleToDecref(let r)): return l == r
      case (.operation(let l), .operation(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Eager_CreateContextRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifies the full cluster, and this particular worker's position within.
  public var serverDef: Tensorflow_ServerDef {
    get {return _storage._serverDef ?? Tensorflow_ServerDef()}
    set {_uniqueStorage()._serverDef = newValue}
  }
  /// Returns true if `serverDef` has been explicitly set.
  public var hasServerDef: Bool {return _storage._serverDef != nil}
  /// Clears the value of `serverDef`. Subsequent reads from it will return its default value.
  public mutating func clearServerDef() {_storage._serverDef = nil}

  /// Whether the ops on the worker should be executed synchronously or
  /// asynchronously. By default, ops are executed synchronously.
  public var async: Bool {
    get {return _storage._async}
    set {_uniqueStorage()._async = newValue}
  }

  /// Number of seconds to keep the context alive. If more than keep_alive_secs
  /// has passed since a particular context has been communicated with, it will
  /// be garbage collected.
  public var keepAliveSecs: Int64 {
    get {return _storage._keepAliveSecs}
    set {_uniqueStorage()._keepAliveSecs = newValue}
  }

  /// This is the version for all the ops that will be enqueued by the client.
  public var versionDef: Tensorflow_VersionDef {
    get {return _storage._versionDef ?? Tensorflow_VersionDef()}
    set {_uniqueStorage()._versionDef = newValue}
  }
  /// Returns true if `versionDef` has been explicitly set.
  public var hasVersionDef: Bool {return _storage._versionDef != nil}
  /// Clears the value of `versionDef`. Subsequent reads from it will return its default value.
  public mutating func clearVersionDef() {_storage._versionDef = nil}

  /// This ID will be used for all future communications. It is essential that
  /// both ends use this ID for selecting a rendezvous to get everything to
  /// match.
  public var rendezvousID: Int64 {
    get {return _storage._rendezvousID}
    set {_uniqueStorage()._rendezvousID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Eager_CreateContextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the created context. This is usually a randomly generated number,
  /// that will be used to identify the context in future requests to the
  /// service. Contexts are not persisted through server restarts.
  public var contextID: UInt64 = 0

  /// List of devices that are locally accessible to the worker.
  public var deviceAttributes: [Tensorflow_DeviceAttributes] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_EnqueueRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contextID: UInt64 = 0

  public var queue: [Tensorflow_Eager_QueueItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_EnqueueResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_WaitQueueDoneRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contextID: UInt64 = 0

  /// Ids to wait on. If empty, wait on everything currently pending.
  public var opID: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// TODO(nareshmodi): Consider adding NodeExecStats here to be able to
/// propagate some stats.
public struct Tensorflow_Eager_WaitQueueDoneResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_KeepAliveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contextID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_KeepAliveResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_CloseContextRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contextID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_CloseContextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_Eager_RegisterFunctionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contextID: UInt64 {
    get {return _storage._contextID}
    set {_uniqueStorage()._contextID = newValue}
  }

  public var functionDef: Tensorflow_FunctionDef {
    get {return _storage._functionDef ?? Tensorflow_FunctionDef()}
    set {_uniqueStorage()._functionDef = newValue}
  }
  /// Returns true if `functionDef` has been explicitly set.
  public var hasFunctionDef: Bool {return _storage._functionDef != nil}
  /// Clears the value of `functionDef`. Subsequent reads from it will return its default value.
  public mutating func clearFunctionDef() {_storage._functionDef = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Eager_RegisterFunctionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.eager"

extension Tensorflow_Eager_RemoteTensorHandle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoteTensorHandle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "op_id"),
    2: .standard(proto: "output_num"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.opID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.outputNum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.opID != 0 {
      try visitor.visitSingularInt64Field(value: self.opID, fieldNumber: 1)
    }
    if self.outputNum != 0 {
      try visitor.visitSingularInt32Field(value: self.outputNum, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_RemoteTensorHandle) -> Bool {
    if self.opID != other.opID {return false}
    if self.outputNum != other.outputNum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "inputs"),
    4: .standard(proto: "control_op_ids"),
    5: .same(proto: "attrs"),
    6: .same(proto: "device"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 4: try decoder.decodeRepeatedInt64Field(value: &self.controlOpIds)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_AttrValue>.self, value: &self.attrs)
      case 6: try decoder.decodeSingularStringField(value: &self.device)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if !self.controlOpIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.controlOpIds, fieldNumber: 4)
    }
    if !self.attrs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_AttrValue>.self, value: self.attrs, fieldNumber: 5)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_Operation) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.inputs != other.inputs {return false}
    if self.controlOpIds != other.controlOpIds {return false}
    if self.attrs != other.attrs {return false}
    if self.device != other.device {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_QueueItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueueItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "handle_to_decref"),
    2: .same(proto: "operation"),
  ]

  fileprivate class _StorageClass {
    var _item: Tensorflow_Eager_QueueItem.OneOf_Item?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Tensorflow_Eager_RemoteTensorHandle?
          if let current = _storage._item {
            try decoder.handleConflictingOneOf()
            if case .handleToDecref(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._item = .handleToDecref(v)}
        case 2:
          var v: Tensorflow_Eager_Operation?
          if let current = _storage._item {
            try decoder.handleConflictingOneOf()
            if case .operation(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._item = .operation(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._item {
      case .handleToDecref(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .operation(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_QueueItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._item != other_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_CreateContextRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateContextRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_def"),
    2: .same(proto: "async"),
    3: .standard(proto: "keep_alive_secs"),
    4: .standard(proto: "version_def"),
    5: .standard(proto: "rendezvous_id"),
  ]

  fileprivate class _StorageClass {
    var _serverDef: Tensorflow_ServerDef? = nil
    var _async: Bool = false
    var _keepAliveSecs: Int64 = 0
    var _versionDef: Tensorflow_VersionDef? = nil
    var _rendezvousID: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serverDef = source._serverDef
      _async = source._async
      _keepAliveSecs = source._keepAliveSecs
      _versionDef = source._versionDef
      _rendezvousID = source._rendezvousID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._serverDef)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._async)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._keepAliveSecs)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._versionDef)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._rendezvousID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._serverDef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._async != false {
        try visitor.visitSingularBoolField(value: _storage._async, fieldNumber: 2)
      }
      if _storage._keepAliveSecs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._keepAliveSecs, fieldNumber: 3)
      }
      if let v = _storage._versionDef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._rendezvousID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rendezvousID, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_CreateContextRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._serverDef != other_storage._serverDef {return false}
        if _storage._async != other_storage._async {return false}
        if _storage._keepAliveSecs != other_storage._keepAliveSecs {return false}
        if _storage._versionDef != other_storage._versionDef {return false}
        if _storage._rendezvousID != other_storage._rendezvousID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_CreateContextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateContextResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "context_id"),
    2: .standard(proto: "device_attributes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self.contextID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.deviceAttributes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.contextID != 0 {
      try visitor.visitSingularFixed64Field(value: self.contextID, fieldNumber: 1)
    }
    if !self.deviceAttributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deviceAttributes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_CreateContextResponse) -> Bool {
    if self.contextID != other.contextID {return false}
    if self.deviceAttributes != other.deviceAttributes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_EnqueueRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnqueueRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "context_id"),
    3: .same(proto: "queue"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self.contextID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.queue)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.contextID != 0 {
      try visitor.visitSingularFixed64Field(value: self.contextID, fieldNumber: 1)
    }
    if !self.queue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_EnqueueRequest) -> Bool {
    if self.contextID != other.contextID {return false}
    if self.queue != other.queue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_EnqueueResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnqueueResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_EnqueueResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_WaitQueueDoneRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaitQueueDoneRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "context_id"),
    2: .standard(proto: "op_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self.contextID)
      case 2: try decoder.decodeRepeatedInt64Field(value: &self.opID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.contextID != 0 {
      try visitor.visitSingularFixed64Field(value: self.contextID, fieldNumber: 1)
    }
    if !self.opID.isEmpty {
      try visitor.visitPackedInt64Field(value: self.opID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_WaitQueueDoneRequest) -> Bool {
    if self.contextID != other.contextID {return false}
    if self.opID != other.opID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_WaitQueueDoneResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WaitQueueDoneResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_WaitQueueDoneResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_KeepAliveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeepAliveRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "context_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self.contextID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.contextID != 0 {
      try visitor.visitSingularFixed64Field(value: self.contextID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_KeepAliveRequest) -> Bool {
    if self.contextID != other.contextID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_KeepAliveResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeepAliveResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_KeepAliveResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_CloseContextRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloseContextRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "context_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self.contextID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.contextID != 0 {
      try visitor.visitSingularFixed64Field(value: self.contextID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_CloseContextRequest) -> Bool {
    if self.contextID != other.contextID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_CloseContextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloseContextResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_CloseContextResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_RegisterFunctionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterFunctionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "context_id"),
    2: .standard(proto: "function_def"),
  ]

  fileprivate class _StorageClass {
    var _contextID: UInt64 = 0
    var _functionDef: Tensorflow_FunctionDef? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _contextID = source._contextID
      _functionDef = source._functionDef
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._contextID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._functionDef)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._contextID != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._contextID, fieldNumber: 1)
      }
      if let v = _storage._functionDef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_RegisterFunctionRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._contextID != other_storage._contextID {return false}
        if _storage._functionDef != other_storage._functionDef {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Eager_RegisterFunctionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterFunctionResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Eager_RegisterFunctionResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
