// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/protobuf/checkpointable_object_graph.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_CheckpointableObjectGraph {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nodes: [Tensorflow_CheckpointableObjectGraph.CheckpointableObject] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct CheckpointableObject {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Objects which this object depends on.
    public var children: [Tensorflow_CheckpointableObjectGraph.CheckpointableObject.ObjectReference] = []

    /// Serialized data specific to this object.
    public var attributes: [Tensorflow_CheckpointableObjectGraph.CheckpointableObject.SerializedTensor] = []

    /// Slot variables owned by this object.
    public var slotVariables: [Tensorflow_CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct ObjectReference {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// An index into `CheckpointableObjectGraph.nodes`, indicating the object
      /// being referenced.
      public var nodeID: Int32 = 0

      /// A user-provided name for the edge.
      public var localName: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct SerializedTensor {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// A name for the Tensor. Simple variables have only one
      /// `SerializedTensor` named "VARIABLE_VALUE" by convention. This value may
      /// be restored on object creation as an optimization.
      public var name: String = String()

      /// The full name of the variable/tensor, if applicable. Used to allow
      /// name-based loading of checkpoints which were saved using an
      /// object-based API. Should match the checkpoint key which would have been
      /// assigned by tf.train.Saver.
      public var fullName: String = String()

      /// The generated name of the Tensor in the checkpoint.
      public var checkpointKey: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct SlotVariableReference {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// An index into `CheckpointableObjectGraph.nodes`, indicating the
      /// variable object this slot was created for.
      public var originalVariableNodeID: Int32 = 0

      /// The name of the slot (e.g. "m"/"v").
      public var slotName: String = String()

      /// An index into `CheckpointableObjectGraph.nodes`, indicating the
      /// `Object` with the value of the slot variable.
      public var slotVariableNodeID: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_CheckpointableObjectGraph: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckpointableObjectGraph"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CheckpointableObjectGraph) -> Bool {
    if self.nodes != other.nodes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_CheckpointableObjectGraph.CheckpointableObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tensorflow_CheckpointableObjectGraph.protoMessageName + ".CheckpointableObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "children"),
    2: .same(proto: "attributes"),
    3: .standard(proto: "slot_variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.children)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributes)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.slotVariables)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 1)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 2)
    }
    if !self.slotVariables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slotVariables, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CheckpointableObjectGraph.CheckpointableObject) -> Bool {
    if self.children != other.children {return false}
    if self.attributes != other.attributes {return false}
    if self.slotVariables != other.slotVariables {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_CheckpointableObjectGraph.CheckpointableObject.ObjectReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tensorflow_CheckpointableObjectGraph.CheckpointableObject.protoMessageName + ".ObjectReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .standard(proto: "local_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.nodeID)
      case 2: try decoder.decodeSingularStringField(value: &self.localName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nodeID != 0 {
      try visitor.visitSingularInt32Field(value: self.nodeID, fieldNumber: 1)
    }
    if !self.localName.isEmpty {
      try visitor.visitSingularStringField(value: self.localName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CheckpointableObjectGraph.CheckpointableObject.ObjectReference) -> Bool {
    if self.nodeID != other.nodeID {return false}
    if self.localName != other.localName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_CheckpointableObjectGraph.CheckpointableObject.SerializedTensor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tensorflow_CheckpointableObjectGraph.CheckpointableObject.protoMessageName + ".SerializedTensor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "full_name"),
    3: .standard(proto: "checkpoint_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.fullName)
      case 3: try decoder.decodeSingularStringField(value: &self.checkpointKey)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.fullName.isEmpty {
      try visitor.visitSingularStringField(value: self.fullName, fieldNumber: 2)
    }
    if !self.checkpointKey.isEmpty {
      try visitor.visitSingularStringField(value: self.checkpointKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CheckpointableObjectGraph.CheckpointableObject.SerializedTensor) -> Bool {
    if self.name != other.name {return false}
    if self.fullName != other.fullName {return false}
    if self.checkpointKey != other.checkpointKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Tensorflow_CheckpointableObjectGraph.CheckpointableObject.protoMessageName + ".SlotVariableReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_variable_node_id"),
    2: .standard(proto: "slot_name"),
    3: .standard(proto: "slot_variable_node_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.originalVariableNodeID)
      case 2: try decoder.decodeSingularStringField(value: &self.slotName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.slotVariableNodeID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.originalVariableNodeID != 0 {
      try visitor.visitSingularInt32Field(value: self.originalVariableNodeID, fieldNumber: 1)
    }
    if !self.slotName.isEmpty {
      try visitor.visitSingularStringField(value: self.slotName, fieldNumber: 2)
    }
    if self.slotVariableNodeID != 0 {
      try visitor.visitSingularInt32Field(value: self.slotVariableNodeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference) -> Bool {
    if self.originalVariableNodeID != other.originalVariableNodeID {return false}
    if self.slotName != other.slotName {return false}
    if self.slotVariableNodeID != other.slotVariableNodeID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
