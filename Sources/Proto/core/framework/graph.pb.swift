// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/graph.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the graph of operations
public struct Tensorflow_GraphDef: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GraphDef"

  public var node: [Tensorflow_NodeDef] {
    get {return _storage._node}
    set {_uniqueStorage()._node = newValue}
  }

  /// Compatibility versions of the graph.  See core/public/version.h for version
  /// history.  The GraphDef version is distinct from the TensorFlow version, and
  /// each release of TensorFlow will support a range of GraphDef versions.
  public var versions: Tensorflow_VersionDef {
    get {return _storage._versions ?? Tensorflow_VersionDef()}
    set {_uniqueStorage()._versions = newValue}
  }
  /// Returns true if `versions` has been explicitly set.
  public var hasVersions: Bool {return _storage._versions != nil}
  /// Clears the value of `versions`. Subsequent reads from it will return its default value.
  public mutating func clearVersions() {_storage._versions = nil}

  /// Deprecated single version field; use versions above instead.  Since all
  /// GraphDef changes before "versions" was introduced were forward
  /// compatible, this field is entirely ignored.
  public var version: Int32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
  ///
  /// "library" provides user-defined functions.
  ///
  /// Naming:
  ///   * library.function.name are in a flat namespace.
  ///     NOTE: We may need to change it to be hierarchical to support
  ///     different orgs. E.g.,
  ///     { "/google/nn", { ... }},
  ///     { "/google/vision", { ... }}
  ///     { "/org_foo/module_bar", { ... }}
  ///     map<string, FunctionDefLib> named_lib;
  ///   * If node[i].op is the name of one function in "library",
  ///     node[i] is deemed as a function call. Otherwise, node[i].op
  ///     must be a primitive operation supported by the runtime.
  ///
  ///
  /// Function call semantics:
  ///
  ///   * The callee may start execution as soon as some of its inputs
  ///     are ready. The caller may want to use Tuple() mechanism to
  ///     ensure all inputs are ready in the same time.
  ///
  ///   * The consumer of return values may start executing as soon as
  ///     the return values the consumer depends on are ready.  The
  ///     consumer may want to use Tuple() mechanism to ensure the
  ///     consumer does not start until all return values of the callee
  ///     function are ready.
  public var library: Tensorflow_FunctionDefLibrary {
    get {return _storage._library ?? Tensorflow_FunctionDefLibrary()}
    set {_uniqueStorage()._library = newValue}
  }
  /// Returns true if `library` has been explicitly set.
  public var hasLibrary: Bool {return _storage._library != nil}
  /// Clears the value of `library`. Subsequent reads from it will return its default value.
  public mutating func clearLibrary() {_storage._library = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._node)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._library)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._version)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._versions)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._node.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._node, fieldNumber: 1)
      }
      if let v = _storage._library {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._version != 0 {
        try visitor.visitSingularInt32Field(value: _storage._version, fieldNumber: 3)
      }
      if let v = _storage._versions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_GraphDef: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    4: .same(proto: "versions"),
    3: .same(proto: "version"),
    2: .same(proto: "library"),
  ]

  fileprivate class _StorageClass {
    var _node: [Tensorflow_NodeDef] = []
    var _versions: Tensorflow_VersionDef? = nil
    var _version: Int32 = 0
    var _library: Tensorflow_FunctionDefLibrary? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _node = source._node
      _versions = source._versions
      _version = source._version
      _library = source._library
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_GraphDef) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._node != other_storage._node {return false}
        if _storage._versions != other_storage._versions {return false}
        if _storage._version != other_storage._version {return false}
        if _storage._library != other_storage._library {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
