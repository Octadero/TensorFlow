// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/remote_fused_graph_execute_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Protocol buffer representing a handle to a tensorflow resource. Handles are
/// not valid across executions, but can be serialized back and forth from within
/// a single run.
public struct Tensorflow_RemoteFusedGraphExecuteInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RemoteFusedGraphExecuteInfo"

  /// Definition of remote graph
  public var remoteGraph: Tensorflow_GraphDef {
    get {return _storage._remoteGraph ?? Tensorflow_GraphDef()}
    set {_uniqueStorage()._remoteGraph = newValue}
  }
  /// Returns true if `remoteGraph` has been explicitly set.
  public var hasRemoteGraph: Bool {return _storage._remoteGraph != nil}
  /// Clears the value of `remoteGraph`. Subsequent reads from it will return its default value.
  public mutating func clearRemoteGraph() {_storage._remoteGraph = nil}

  /// Remote fused graph input node name
  public var graphInputNodeName: [String] {
    get {return _storage._graphInputNodeName}
    set {_uniqueStorage()._graphInputNodeName = newValue}
  }

  /// Remote fused graph output node name
  public var graphOutputNodeName: [String] {
    get {return _storage._graphOutputNodeName}
    set {_uniqueStorage()._graphOutputNodeName = newValue}
  }

  /// Executor's name
  public var executorName: String {
    get {return _storage._executorName}
    set {_uniqueStorage()._executorName = newValue}
  }

  /// Optional: Parameters given to the executor
  public var serializedExecutorParameters: Data {
    get {return _storage._serializedExecutorParameters}
    set {_uniqueStorage()._serializedExecutorParameters = newValue}
  }

  /// Optional: Default graph input tensor shape used to allocate memory
  /// before executing op
  public var defaultGraphInputTensorShape: [Tensorflow_RemoteFusedGraphExecuteInfo.TensorShapeTypeProto] {
    get {return _storage._defaultGraphInputTensorShape}
    set {_uniqueStorage()._defaultGraphInputTensorShape = newValue}
  }

  /// Optional: Default graph input tensor shape used to allocate memory
  /// before executing op
  /// TODO(satok): Remote output tensor shape once shape information is stored
  /// in NodeDef
  public var defaultGraphOutputTensorShape: [Tensorflow_RemoteFusedGraphExecuteInfo.TensorShapeTypeProto] {
    get {return _storage._defaultGraphOutputTensorShape}
    set {_uniqueStorage()._defaultGraphOutputTensorShape = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum NodeType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unused // = 0
    case graphInput // = 1
    case graphOutput // = 2
    case fusedNode // = 3
    case borderInput // = 4
    case borderOutput // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unused
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unused
      case 1: self = .graphInput
      case 2: self = .graphOutput
      case 3: self = .fusedNode
      case 4: self = .borderInput
      case 5: self = .borderOutput
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unused: return 0
      case .graphInput: return 1
      case .graphOutput: return 2
      case .fusedNode: return 3
      case .borderInput: return 4
      case .borderOutput: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct TensorShapeTypeProto: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_RemoteFusedGraphExecuteInfo.protoMessageName + ".TensorShapeTypeProto"

    public var dtype: Tensorflow_DataType {
      get {return _storage._dtype}
      set {_uniqueStorage()._dtype = newValue}
    }

    public var shape: Tensorflow_TensorShapeProto {
      get {return _storage._shape ?? Tensorflow_TensorShapeProto()}
      set {_uniqueStorage()._shape = newValue}
    }
    /// Returns true if `shape` has been explicitly set.
    public var hasShape: Bool {return _storage._shape != nil}
    /// Clears the value of `shape`. Subsequent reads from it will return its default value.
    public mutating func clearShape() {_storage._shape = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularEnumField(value: &_storage._dtype)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._shape)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._dtype != .dtInvalid {
          try visitor.visitSingularEnumField(value: _storage._dtype, fieldNumber: 1)
        }
        if let v = _storage._shape {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._remoteGraph)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._graphInputNodeName)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._graphOutputNodeName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._executorName)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._serializedExecutorParameters)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._defaultGraphInputTensorShape)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._defaultGraphOutputTensorShape)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._remoteGraph {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._graphInputNodeName.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._graphInputNodeName, fieldNumber: 2)
      }
      if !_storage._graphOutputNodeName.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._graphOutputNodeName, fieldNumber: 3)
      }
      if !_storage._executorName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._executorName, fieldNumber: 4)
      }
      if !_storage._serializedExecutorParameters.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._serializedExecutorParameters, fieldNumber: 5)
      }
      if !_storage._defaultGraphInputTensorShape.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._defaultGraphInputTensorShape, fieldNumber: 6)
      }
      if !_storage._defaultGraphOutputTensorShape.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._defaultGraphOutputTensorShape, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_RemoteFusedGraphExecuteInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remote_graph"),
    2: .standard(proto: "graph_input_node_name"),
    3: .standard(proto: "graph_output_node_name"),
    4: .standard(proto: "executor_name"),
    5: .standard(proto: "serialized_executor_parameters"),
    6: .standard(proto: "default_graph_input_tensor_shape"),
    7: .standard(proto: "default_graph_output_tensor_shape"),
  ]

  fileprivate class _StorageClass {
    var _remoteGraph: Tensorflow_GraphDef? = nil
    var _graphInputNodeName: [String] = []
    var _graphOutputNodeName: [String] = []
    var _executorName: String = String()
    var _serializedExecutorParameters: Data = SwiftProtobuf.Internal.emptyData
    var _defaultGraphInputTensorShape: [Tensorflow_RemoteFusedGraphExecuteInfo.TensorShapeTypeProto] = []
    var _defaultGraphOutputTensorShape: [Tensorflow_RemoteFusedGraphExecuteInfo.TensorShapeTypeProto] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _remoteGraph = source._remoteGraph
      _graphInputNodeName = source._graphInputNodeName
      _graphOutputNodeName = source._graphOutputNodeName
      _executorName = source._executorName
      _serializedExecutorParameters = source._serializedExecutorParameters
      _defaultGraphInputTensorShape = source._defaultGraphInputTensorShape
      _defaultGraphOutputTensorShape = source._defaultGraphOutputTensorShape
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_RemoteFusedGraphExecuteInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._remoteGraph != other_storage._remoteGraph {return false}
        if _storage._graphInputNodeName != other_storage._graphInputNodeName {return false}
        if _storage._graphOutputNodeName != other_storage._graphOutputNodeName {return false}
        if _storage._executorName != other_storage._executorName {return false}
        if _storage._serializedExecutorParameters != other_storage._serializedExecutorParameters {return false}
        if _storage._defaultGraphInputTensorShape != other_storage._defaultGraphInputTensorShape {return false}
        if _storage._defaultGraphOutputTensorShape != other_storage._defaultGraphOutputTensorShape {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_RemoteFusedGraphExecuteInfo.NodeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNUSED"),
    1: .same(proto: "GRAPH_INPUT"),
    2: .same(proto: "GRAPH_OUTPUT"),
    3: .same(proto: "FUSED_NODE"),
    4: .same(proto: "BORDER_INPUT"),
    5: .same(proto: "BORDER_OUTPUT"),
  ]
}

extension Tensorflow_RemoteFusedGraphExecuteInfo.TensorShapeTypeProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dtype"),
    2: .same(proto: "shape"),
  ]

  fileprivate class _StorageClass {
    var _dtype: Tensorflow_DataType = .dtInvalid
    var _shape: Tensorflow_TensorShapeProto? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dtype = source._dtype
      _shape = source._shape
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_RemoteFusedGraphExecuteInfo.TensorShapeTypeProto) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._dtype != other_storage._dtype {return false}
        if _storage._shape != other_storage._shape {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
