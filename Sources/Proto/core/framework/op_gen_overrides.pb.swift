// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/op_gen_overrides.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Defines the text format for adding per-op overrides for client
// language op code generators.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Used to override the default API & behavior in the generated code
/// for client languages, from what you would get from the OpDef alone.
/// This is so we can evolve the API while remaining backwards
/// compatible when interpretting old graphs.  Overrides go in an
/// "op_gen_overrides.pbtxt" file with a text-format OpGenOverrides
/// message.  Right now these only apply to the C++ API.
/// TODO(josh11b): In the future there will be a common set of overrides
/// and per-client-language overrides.
///
/// WARNING: Be *very* careful using these features -- these overrides
/// can change the semantics of existing code.  These changes may need
/// to wait until a major release of TensorFlow to avoid breaking our
/// compatibility promises.
public struct Tensorflow_OpGenOverride: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".OpGenOverride"

  /// Name of the op to apply overrides to.
  public var name: String = String()

  /// Do not include this op in the generated API.
  /// If `skip` is true, all other overrides are ignored for this op.
  public var skip: Bool = false

  /// Hide this op by putting it into an internal namespace (or whatever
  /// is appropriate in the target language).
  public var hide: Bool = false

  /// Use a different name in the API than the op's name. Note that
  /// the op's name in `backticks` will also be replaced in the docs.
  public var renameTo: String = String()

  /// Create *additional* API endpoints with different names (contrast
  /// with rename_to, which affects the original name).
  public var alias: [String] = []

  public var attrDefault: [Tensorflow_OpGenOverride.AttrDefault] = []

  public var attrRename: [Tensorflow_OpGenOverride.Rename] = []

  public var inputRename: [Tensorflow_OpGenOverride.Rename] = []

  public var outputRename: [Tensorflow_OpGenOverride.Rename] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Map the name of an attr to a new default value to use.  This
  /// default will be used when creating new graphs, as opposed to the
  /// default in the OpDef, which will be used when interpreting old
  /// GraphDefs.  If this attr is also renamed (using attr_rename
  /// below), use the original name of the attr.
  public struct AttrDefault: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_OpGenOverride.protoMessageName + ".AttrDefault"

    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    public var value: Tensorflow_AttrValue {
      get {return _storage._value ?? Tensorflow_AttrValue()}
      set {_uniqueStorage()._value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return _storage._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {_storage._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._name)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if !_storage._name.isEmpty {
          try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
        }
        if let v = _storage._value {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Change the name used to access attrs/inputs/outputs in the API
  /// from what is used in the GraphDef.  Note that these names in
  /// `backticks` will also be replaced in the docs.
  public struct Rename: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_OpGenOverride.protoMessageName + ".Rename"

    public var from: String = String()

    public var to: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.from)
        case 2: try decoder.decodeSingularStringField(value: &self.to)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.from.isEmpty {
        try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
      }
      if !self.to.isEmpty {
        try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularBoolField(value: &self.skip)
      case 3: try decoder.decodeSingularBoolField(value: &self.hide)
      case 4: try decoder.decodeSingularStringField(value: &self.renameTo)
      case 5: try decoder.decodeRepeatedStringField(value: &self.alias)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.attrDefault)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.attrRename)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.inputRename)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.outputRename)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.skip != false {
      try visitor.visitSingularBoolField(value: self.skip, fieldNumber: 2)
    }
    if self.hide != false {
      try visitor.visitSingularBoolField(value: self.hide, fieldNumber: 3)
    }
    if !self.renameTo.isEmpty {
      try visitor.visitSingularStringField(value: self.renameTo, fieldNumber: 4)
    }
    if !self.alias.isEmpty {
      try visitor.visitRepeatedStringField(value: self.alias, fieldNumber: 5)
    }
    if !self.attrDefault.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attrDefault, fieldNumber: 6)
    }
    if !self.attrRename.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attrRename, fieldNumber: 7)
    }
    if !self.inputRename.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputRename, fieldNumber: 8)
    }
    if !self.outputRename.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputRename, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_OpGenOverrides: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".OpGenOverrides"

  public var op: [Tensorflow_OpGenOverride] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.op)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.op.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.op, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_OpGenOverride: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "skip"),
    3: .same(proto: "hide"),
    4: .standard(proto: "rename_to"),
    5: .same(proto: "alias"),
    6: .standard(proto: "attr_default"),
    7: .standard(proto: "attr_rename"),
    8: .standard(proto: "input_rename"),
    9: .standard(proto: "output_rename"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_OpGenOverride) -> Bool {
    if self.name != other.name {return false}
    if self.skip != other.skip {return false}
    if self.hide != other.hide {return false}
    if self.renameTo != other.renameTo {return false}
    if self.alias != other.alias {return false}
    if self.attrDefault != other.attrDefault {return false}
    if self.attrRename != other.attrRename {return false}
    if self.inputRename != other.inputRename {return false}
    if self.outputRename != other.outputRename {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_OpGenOverride.AttrDefault: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Tensorflow_AttrValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_OpGenOverride.AttrDefault) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_OpGenOverride.Rename: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_OpGenOverride.Rename) -> Bool {
    if self.from != other.from {return false}
    if self.to != other.to {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_OpGenOverrides: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_OpGenOverrides) -> Bool {
    if self.op != other.op {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
