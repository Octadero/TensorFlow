// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/device_attributes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_DeviceLocality: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".DeviceLocality"

  /// Optional bus locality of device.  Default value of 0 means
  /// no specific locality.  Specific localities are indexed from 1.
  public var busID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.busID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.busID != 0 {
      try visitor.visitSingularInt32Field(value: self.busID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_DeviceAttributes: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".DeviceAttributes"

  /// Fully specified name of the device within a cluster.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// String representation of device_type.
  public var deviceType: String {
    get {return _storage._deviceType}
    set {_uniqueStorage()._deviceType = newValue}
  }

  /// Memory capacity of device in bytes.
  public var memoryLimit: Int64 {
    get {return _storage._memoryLimit}
    set {_uniqueStorage()._memoryLimit = newValue}
  }

  /// Platform-specific data about device that may be useful
  /// for supporting efficient data transfers.
  public var locality: Tensorflow_DeviceLocality {
    get {return _storage._locality ?? Tensorflow_DeviceLocality()}
    set {_uniqueStorage()._locality = newValue}
  }
  /// Returns true if `locality` has been explicitly set.
  public var hasLocality: Bool {return _storage._locality != nil}
  /// Clears the value of `locality`. Subsequent reads from it will return its default value.
  public mutating func clearLocality() {_storage._locality = nil}

  /// A device is assigned a global unique number each time it is
  /// initialized. "incarnation" should never be 0.
  public var incarnation: UInt64 {
    get {return _storage._incarnation}
    set {_uniqueStorage()._incarnation = newValue}
  }

  /// String representation of the physical device that this device maps to.
  public var physicalDeviceDesc: String {
    get {return _storage._physicalDeviceDesc}
    set {_uniqueStorage()._physicalDeviceDesc = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._deviceType)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._memoryLimit)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._locality)
        case 6: try decoder.decodeSingularFixed64Field(value: &_storage._incarnation)
        case 7: try decoder.decodeSingularStringField(value: &_storage._physicalDeviceDesc)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._deviceType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceType, fieldNumber: 2)
      }
      if _storage._memoryLimit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._memoryLimit, fieldNumber: 4)
      }
      if let v = _storage._locality {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._incarnation != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._incarnation, fieldNumber: 6)
      }
      if !_storage._physicalDeviceDesc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._physicalDeviceDesc, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_DeviceLocality: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bus_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_DeviceLocality) -> Bool {
    if self.busID != other.busID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_DeviceAttributes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "device_type"),
    4: .standard(proto: "memory_limit"),
    5: .same(proto: "locality"),
    6: .same(proto: "incarnation"),
    7: .standard(proto: "physical_device_desc"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _deviceType: String = String()
    var _memoryLimit: Int64 = 0
    var _locality: Tensorflow_DeviceLocality? = nil
    var _incarnation: UInt64 = 0
    var _physicalDeviceDesc: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _deviceType = source._deviceType
      _memoryLimit = source._memoryLimit
      _locality = source._locality
      _incarnation = source._incarnation
      _physicalDeviceDesc = source._physicalDeviceDesc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_DeviceAttributes) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._deviceType != other_storage._deviceType {return false}
        if _storage._memoryLimit != other_storage._memoryLimit {return false}
        if _storage._locality != other_storage._locality {return false}
        if _storage._incarnation != other_storage._incarnation {return false}
        if _storage._physicalDeviceDesc != other_storage._physicalDeviceDesc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
