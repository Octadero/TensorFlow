// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/resource_handle.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Protocol buffer representing a handle to a tensorflow resource. Handles are
/// not valid across executions, but can be serialized back and forth from within
/// a single run.
public struct Tensorflow_ResourceHandleProto: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ResourceHandleProto"

  /// Unique name for the device containing the resource.
  public var device: String = String()

  /// Container in which this resource is placed.
  public var container: String = String()

  /// Unique name of this resource.
  public var name: String = String()

  /// Hash code for the type of the resource. Is only valid in the same device
  /// and in the same execution.
  public var hashCode: UInt64 = 0

  /// For debug-only, the name of the type pointed to by this handle, if
  /// available.
  public var maybeTypeName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.device)
      case 2: try decoder.decodeSingularStringField(value: &self.container)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.hashCode)
      case 5: try decoder.decodeSingularStringField(value: &self.maybeTypeName)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 1)
    }
    if !self.container.isEmpty {
      try visitor.visitSingularStringField(value: self.container, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.hashCode != 0 {
      try visitor.visitSingularUInt64Field(value: self.hashCode, fieldNumber: 4)
    }
    if !self.maybeTypeName.isEmpty {
      try visitor.visitSingularStringField(value: self.maybeTypeName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_ResourceHandleProto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "container"),
    3: .same(proto: "name"),
    4: .standard(proto: "hash_code"),
    5: .standard(proto: "maybe_type_name"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_ResourceHandleProto) -> Bool {
    if self.device != other.device {return false}
    if self.container != other.container {return false}
    if self.name != other.name {return false}
    if self.hashCode != other.hashCode {return false}
    if self.maybeTypeName != other.maybeTypeName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
