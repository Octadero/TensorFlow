// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/framework/api_def.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Defines the text format for including per-op API definition and
// overrides for client language op code generators.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Used to specify and override the default API & behavior in the
/// generated code for client languages, from what you would get from
/// the OpDef alone. There will be a set of ApiDefs that are common
/// to all client languages, and another set per client language.
/// The per-client-language ApiDefs will inherit values from the
/// common ApiDefs which it can either replace or modify.
///
/// We separate the API definition from the OpDef so we can evolve the
/// API while remaining backwards compatible when interpretting old
/// graphs.  Overrides go in an "api_def.pbtxt" file with a text-format
/// ApiDefs message.
///
/// WARNING: Be *very* careful changing the API for any existing op --
/// you can change the semantics of existing code.  These changes may
/// need to wait until a major release of TensorFlow to avoid breaking
/// our compatibility promises.
public struct Tensorflow_ApiDef: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ApiDef"

  /// Name of the op (in the OpDef) to specify the API for.
  public var graphOpName: String = String()

  public var visibility: Tensorflow_ApiDef.Visibility = .defaultVisibility

  public var endpoint: [Tensorflow_ApiDef.Endpoint] = []

  public var inArg: [Tensorflow_ApiDef.Arg] = []

  public var outArg: [Tensorflow_ApiDef.Arg] = []

  /// List of post-rename in_arg names to specify new argument order.
  /// Length of arg_order should be either empty to keep current order
  /// or match size of in_arg.
  public var argOrder: [String] = []

  public var attr: [Tensorflow_ApiDef.Attr] = []

  /// One-line human-readable description of what the Op does.
  public var summary: String = String()

  /// Additional, longer human-readable description of what the Op does.
  public var description_p: String = String()

  /// Modify an existing/inherited description by adding text to the beginning
  /// or end.
  public var descriptionPrefix: String = String()

  public var descriptionSuffix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Visibility: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Normally this is "VISIBLE" unless you are inheriting a
    /// different value from another ApiDef.
    case defaultVisibility // = 0

    /// Publicly visible in the API.
    case visible // = 1

    /// Do not include this op in the generated API. If visibility is
    /// set to 'SKIP', other fields are ignored for this op.
    case skip // = 2

    /// Hide this op by putting it into an internal namespace (or whatever
    /// is appropriate in the target language).
    case hidden // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .defaultVisibility
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .defaultVisibility
      case 1: self = .visible
      case 2: self = .skip
      case 3: self = .hidden
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .defaultVisibility: return 0
      case .visible: return 1
      case .skip: return 2
      case .hidden: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// If you specify any endpoint, this will replace all of the
  /// inherited endpoints.  The first endpoint should be the
  /// "canonical" endpoint, and should not be deprecated (unless all
  /// endpoints are deprecated).
  public struct Endpoint: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_ApiDef.protoMessageName + ".Endpoint"

    /// Name should be either like "CamelCaseName" or
    /// "Package.CamelCaseName".
    public var name: String = String()

    /// First GraphDef version at which the op is disallowed.
    public var deprecationVersion: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.name)
        case 2: try decoder.decodeSingularInt32Field(value: &self.deprecationVersion)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.name.isEmpty {
        try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
      }
      if self.deprecationVersion != 0 {
        try visitor.visitSingularInt32Field(value: self.deprecationVersion, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public struct Arg: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_ApiDef.protoMessageName + ".Arg"

    public var name: String = String()

    /// Change the name used to access this arg in the API from what
    /// is used in the GraphDef.  Note that these names in `backticks`
    /// will also be replaced in the summary & description fields.
    public var renameTo: String = String()

    /// Note: this will replace any inherited arg doc. There is no
    /// current way of modifying arg descriptions (other than replacing
    /// them entirely) as can be done with op descriptions.
    public var description_p: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.name)
        case 2: try decoder.decodeSingularStringField(value: &self.renameTo)
        case 3: try decoder.decodeSingularStringField(value: &self.description_p)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.name.isEmpty {
        try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
      }
      if !self.renameTo.isEmpty {
        try visitor.visitSingularStringField(value: self.renameTo, fieldNumber: 2)
      }
      if !self.description_p.isEmpty {
        try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Description of the graph-construction-time configuration of this
  /// Op.  That is to say, this describes the attr fields that will
  /// be specified in the NodeDef.
  public struct Attr: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_ApiDef.protoMessageName + ".Attr"

    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    /// Change the name used to access this attr in the API from what
    /// is used in the GraphDef.  Note that these names in `backticks`
    /// will also be replaced in the summary & description fields.
    public var renameTo: String {
      get {return _storage._renameTo}
      set {_uniqueStorage()._renameTo = newValue}
    }

    /// Specify a new default value to use for this attr.  This default
    /// will be used when creating new graphs, as opposed to the
    /// default in the OpDef, which will be used when interpreting old
    /// GraphDefs.
    public var defaultValue: Tensorflow_AttrValue {
      get {return _storage._defaultValue ?? Tensorflow_AttrValue()}
      set {_uniqueStorage()._defaultValue = newValue}
    }
    /// Returns true if `defaultValue` has been explicitly set.
    public var hasDefaultValue: Bool {return _storage._defaultValue != nil}
    /// Clears the value of `defaultValue`. Subsequent reads from it will return its default value.
    public mutating func clearDefaultValue() {_storage._defaultValue = nil}

    /// Note: this will replace any inherited attr doc, there is no current
    /// way of modifying attr descriptions as can be done with op descriptions.
    public var description_p: String {
      get {return _storage._description_p}
      set {_uniqueStorage()._description_p = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._name)
          case 2: try decoder.decodeSingularStringField(value: &_storage._renameTo)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._defaultValue)
          case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if !_storage._name.isEmpty {
          try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
        }
        if !_storage._renameTo.isEmpty {
          try visitor.visitSingularStringField(value: _storage._renameTo, fieldNumber: 2)
        }
        if let v = _storage._defaultValue {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        if !_storage._description_p.isEmpty {
          try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.graphOpName)
      case 2: try decoder.decodeSingularEnumField(value: &self.visibility)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.endpoint)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.inArg)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.outArg)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.attr)
      case 7: try decoder.decodeSingularStringField(value: &self.summary)
      case 8: try decoder.decodeSingularStringField(value: &self.description_p)
      case 9: try decoder.decodeSingularStringField(value: &self.descriptionPrefix)
      case 10: try decoder.decodeSingularStringField(value: &self.descriptionSuffix)
      case 11: try decoder.decodeRepeatedStringField(value: &self.argOrder)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.graphOpName.isEmpty {
      try visitor.visitSingularStringField(value: self.graphOpName, fieldNumber: 1)
    }
    if self.visibility != .defaultVisibility {
      try visitor.visitSingularEnumField(value: self.visibility, fieldNumber: 2)
    }
    if !self.endpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.endpoint, fieldNumber: 3)
    }
    if !self.inArg.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inArg, fieldNumber: 4)
    }
    if !self.outArg.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outArg, fieldNumber: 5)
    }
    if !self.attr.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attr, fieldNumber: 6)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularStringField(value: self.summary, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if !self.descriptionPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.descriptionPrefix, fieldNumber: 9)
    }
    if !self.descriptionSuffix.isEmpty {
      try visitor.visitSingularStringField(value: self.descriptionSuffix, fieldNumber: 10)
    }
    if !self.argOrder.isEmpty {
      try visitor.visitRepeatedStringField(value: self.argOrder, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_ApiDefs: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ApiDefs"

  public var op: [Tensorflow_ApiDef] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.op)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.op.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.op, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_ApiDef: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "graph_op_name"),
    2: .same(proto: "visibility"),
    3: .same(proto: "endpoint"),
    4: .standard(proto: "in_arg"),
    5: .standard(proto: "out_arg"),
    11: .standard(proto: "arg_order"),
    6: .same(proto: "attr"),
    7: .same(proto: "summary"),
    8: .same(proto: "description"),
    9: .standard(proto: "description_prefix"),
    10: .standard(proto: "description_suffix"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_ApiDef) -> Bool {
    if self.graphOpName != other.graphOpName {return false}
    if self.visibility != other.visibility {return false}
    if self.endpoint != other.endpoint {return false}
    if self.inArg != other.inArg {return false}
    if self.outArg != other.outArg {return false}
    if self.argOrder != other.argOrder {return false}
    if self.attr != other.attr {return false}
    if self.summary != other.summary {return false}
    if self.description_p != other.description_p {return false}
    if self.descriptionPrefix != other.descriptionPrefix {return false}
    if self.descriptionSuffix != other.descriptionSuffix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_ApiDef.Visibility: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT_VISIBILITY"),
    1: .same(proto: "VISIBLE"),
    2: .same(proto: "SKIP"),
    3: .same(proto: "HIDDEN"),
  ]
}

extension Tensorflow_ApiDef.Endpoint: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "deprecation_version"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_ApiDef.Endpoint) -> Bool {
    if self.name != other.name {return false}
    if self.deprecationVersion != other.deprecationVersion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_ApiDef.Arg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "rename_to"),
    3: .same(proto: "description"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_ApiDef.Arg) -> Bool {
    if self.name != other.name {return false}
    if self.renameTo != other.renameTo {return false}
    if self.description_p != other.description_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_ApiDef.Attr: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "rename_to"),
    3: .standard(proto: "default_value"),
    4: .same(proto: "description"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _renameTo: String = String()
    var _defaultValue: Tensorflow_AttrValue? = nil
    var _description_p: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _renameTo = source._renameTo
      _defaultValue = source._defaultValue
      _description_p = source._description_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_ApiDef.Attr) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._renameTo != other_storage._renameTo {return false}
        if _storage._defaultValue != other_storage._defaultValue {return false}
        if _storage._description_p != other_storage._description_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_ApiDefs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_ApiDefs) -> Bool {
    if self.op != other.op {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
