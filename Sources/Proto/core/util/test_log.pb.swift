// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/util/test_log.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/// Protocol messages for describing the results of benchmarks and unit tests.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_EntryValue: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".EntryValue"

  public var kind: Tensorflow_EntryValue.OneOf_Kind? = nil

  public var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = kind {return v}
      return 0
    }
    set {kind = .doubleValue(newValue)}
  }

  public var stringValue: String {
    get {
      if case .stringValue(let v)? = kind {return v}
      return String()
    }
    set {kind = .stringValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case doubleValue(Double)
    case stringValue(String)

    public static func ==(lhs: Tensorflow_EntryValue.OneOf_Kind, rhs: Tensorflow_EntryValue.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.doubleValue(let l), .doubleValue(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.kind != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.kind = .doubleValue(v)}
      case 2:
        if self.kind != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.kind = .stringValue(v)}
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.kind {
    case .doubleValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    case .stringValue(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Each unit test or benchmark in a test or benchmark run provides
/// some set of information.  Here we provide some reasonable keys
/// one would expect to see, with optional key/value pairs for things
/// we haven't considered.
///
/// This BenchmarkEntry should be emitted by each unit test or benchmark
/// reporter.
public struct Tensorflow_BenchmarkEntry: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".BenchmarkEntry"

  /// The name of the specific benchmark or test
  /// (e.g. BM_AdjustContrast_gpu_B_W_H)
  public var name: String = String()

  /// If a benchmark, how many iterations it was run for
  public var iters: Int64 = 0

  /// Total cpu time used for all iterations (in seconds)
  public var cpuTime: Double = 0

  /// Total wall time used for all iterations (in seconds)
  public var wallTime: Double = 0

  /// Throughput (in MB/s)
  public var throughput: Double = 0

  /// Generic map from result key to value.
  public var extras: Dictionary<String,Tensorflow_EntryValue> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularInt64Field(value: &self.iters)
      case 3: try decoder.decodeSingularDoubleField(value: &self.cpuTime)
      case 4: try decoder.decodeSingularDoubleField(value: &self.wallTime)
      case 5: try decoder.decodeSingularDoubleField(value: &self.throughput)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_EntryValue>.self, value: &self.extras)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.iters != 0 {
      try visitor.visitSingularInt64Field(value: self.iters, fieldNumber: 2)
    }
    if self.cpuTime != 0 {
      try visitor.visitSingularDoubleField(value: self.cpuTime, fieldNumber: 3)
    }
    if self.wallTime != 0 {
      try visitor.visitSingularDoubleField(value: self.wallTime, fieldNumber: 4)
    }
    if self.throughput != 0 {
      try visitor.visitSingularDoubleField(value: self.throughput, fieldNumber: 5)
    }
    if !self.extras.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_EntryValue>.self, value: self.extras, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_BenchmarkEntries: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".BenchmarkEntries"

  public var entry: [Tensorflow_BenchmarkEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entry)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entry.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entry, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_BuildConfiguration: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".BuildConfiguration"

  /// opt, dbg, etc
  public var mode: String = String()

  /// CC compiler flags, if known
  public var ccFlags: [String] = []

  /// Bazel compilation options, if known
  public var opts: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mode)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ccFlags)
      case 3: try decoder.decodeRepeatedStringField(value: &self.opts)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mode.isEmpty {
      try visitor.visitSingularStringField(value: self.mode, fieldNumber: 1)
    }
    if !self.ccFlags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ccFlags, fieldNumber: 2)
    }
    if !self.opts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.opts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_CommitId: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CommitId"

  public var kind: Tensorflow_CommitId.OneOf_Kind? = nil

  public var changelist: Int64 {
    get {
      if case .changelist(let v)? = kind {return v}
      return 0
    }
    set {kind = .changelist(newValue)}
  }

  public var hash: String {
    get {
      if case .hash(let v)? = kind {return v}
      return String()
    }
    set {kind = .hash(newValue)}
  }

  /// Hash of intermediate change between hash/changelist and what was tested.
  /// Not used if the build is from a commit without modifications.
  public var snapshot: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case changelist(Int64)
    case hash(String)

    public static func ==(lhs: Tensorflow_CommitId.OneOf_Kind, rhs: Tensorflow_CommitId.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.changelist(let l), .changelist(let r)): return l == r
      case (.hash(let l), .hash(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.kind != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.kind = .changelist(v)}
      case 2:
        if self.kind != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.kind = .hash(v)}
      case 3: try decoder.decodeSingularStringField(value: &self.snapshot)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.kind {
    case .changelist(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    case .hash(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case nil: break
    }
    if !self.snapshot.isEmpty {
      try visitor.visitSingularStringField(value: self.snapshot, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_CPUInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CPUInfo"

  public var numCores: Int64 = 0

  public var numCoresAllowed: Int64 = 0

  /// How fast are these cpus?
  public var mhzPerCpu: Double = 0

  /// Additional cpu information. For example,
  /// Intel Ivybridge with HyperThreading (24 cores) dL1:32KB dL2:256KB dL3:30MB
  public var cpuInfo: String = String()

  /// What kind of cpu scaling is enabled on the host.
  /// Examples include "performance", "ondemand", "conservative", "mixed".
  public var cpuGovernor: String = String()

  /// Cache sizes (in bytes), e.g. "L2": 262144 (for 256KB)
  public var cacheSize: Dictionary<String,Int64> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.numCores)
      case 2: try decoder.decodeSingularInt64Field(value: &self.numCoresAllowed)
      case 3: try decoder.decodeSingularDoubleField(value: &self.mhzPerCpu)
      case 4: try decoder.decodeSingularStringField(value: &self.cpuInfo)
      case 5: try decoder.decodeSingularStringField(value: &self.cpuGovernor)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &self.cacheSize)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numCores != 0 {
      try visitor.visitSingularInt64Field(value: self.numCores, fieldNumber: 1)
    }
    if self.numCoresAllowed != 0 {
      try visitor.visitSingularInt64Field(value: self.numCoresAllowed, fieldNumber: 2)
    }
    if self.mhzPerCpu != 0 {
      try visitor.visitSingularDoubleField(value: self.mhzPerCpu, fieldNumber: 3)
    }
    if !self.cpuInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.cpuInfo, fieldNumber: 4)
    }
    if !self.cpuGovernor.isEmpty {
      try visitor.visitSingularStringField(value: self.cpuGovernor, fieldNumber: 5)
    }
    if !self.cacheSize.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: self.cacheSize, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_MemoryInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MemoryInfo"

  /// Total virtual memory in bytes
  public var total: Int64 = 0

  /// Immediately available memory in bytes
  public var available: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.total)
      case 2: try decoder.decodeSingularInt64Field(value: &self.available)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.available != 0 {
      try visitor.visitSingularInt64Field(value: self.available, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_GPUInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GPUInfo"

  /// e.g. "Tesla K40c"
  public var model: String = String()

  /// Final entry in output of "nvidia-smi -L"
  public var uuid: String = String()

  /// e.g. "0000:04:00.0"
  public var busID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.model)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeSingularStringField(value: &self.busID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if !self.busID.isEmpty {
      try visitor.visitSingularStringField(value: self.busID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_PlatformInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PlatformInfo"

  /// e.g. '64bit'
  public var bits: String = String()

  /// e.g. 'ELF'
  public var linkage: String = String()

  /// e.g. 'i386'
  public var machine: String = String()

  /// e.g. '3.13.0-76-generic'
  public var release: String = String()

  /// e.g. 'Linux'
  public var system: String = String()

  /// e.g. '#120-Ubuntu SMP Mon Jan 18 15:59:10 UTC 2016'
  public var version: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bits)
      case 2: try decoder.decodeSingularStringField(value: &self.linkage)
      case 3: try decoder.decodeSingularStringField(value: &self.machine)
      case 4: try decoder.decodeSingularStringField(value: &self.release)
      case 5: try decoder.decodeSingularStringField(value: &self.system)
      case 6: try decoder.decodeSingularStringField(value: &self.version)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bits.isEmpty {
      try visitor.visitSingularStringField(value: self.bits, fieldNumber: 1)
    }
    if !self.linkage.isEmpty {
      try visitor.visitSingularStringField(value: self.linkage, fieldNumber: 2)
    }
    if !self.machine.isEmpty {
      try visitor.visitSingularStringField(value: self.machine, fieldNumber: 3)
    }
    if !self.release.isEmpty {
      try visitor.visitSingularStringField(value: self.release, fieldNumber: 4)
    }
    if !self.system.isEmpty {
      try visitor.visitSingularStringField(value: self.system, fieldNumber: 5)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Matches DeviceAttributes
public struct Tensorflow_AvailableDeviceInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AvailableDeviceInfo"

  /// Device name.
  public var name: String = String()

  /// Device type, e.g. 'CPU' or 'GPU'.
  public var type: String = String()

  /// Memory capacity in bytes.
  public var memoryLimit: Int64 = 0

  /// The physical description of this device.
  public var physicalDescription: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularInt64Field(value: &self.memoryLimit)
      case 4: try decoder.decodeSingularStringField(value: &self.physicalDescription)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if self.memoryLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.memoryLimit, fieldNumber: 3)
    }
    if !self.physicalDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.physicalDescription, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_MachineConfiguration: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MachineConfiguration"

  /// Host name of machine that ran the benchmark.
  public var hostname: String {
    get {return _storage._hostname}
    set {_uniqueStorage()._hostname = newValue}
  }

  /// Unique serial number of the machine.
  public var serialIdentifier: String {
    get {return _storage._serialIdentifier}
    set {_uniqueStorage()._serialIdentifier = newValue}
  }

  /// Additional platform information.
  public var platformInfo: Tensorflow_PlatformInfo {
    get {return _storage._platformInfo ?? Tensorflow_PlatformInfo()}
    set {_uniqueStorage()._platformInfo = newValue}
  }
  /// Returns true if `platformInfo` has been explicitly set.
  public var hasPlatformInfo: Bool {return _storage._platformInfo != nil}
  /// Clears the value of `platformInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPlatformInfo() {_storage._platformInfo = nil}

  /// CPU Information.
  public var cpuInfo: Tensorflow_CPUInfo {
    get {return _storage._cpuInfo ?? Tensorflow_CPUInfo()}
    set {_uniqueStorage()._cpuInfo = newValue}
  }
  /// Returns true if `cpuInfo` has been explicitly set.
  public var hasCpuInfo: Bool {return _storage._cpuInfo != nil}
  /// Clears the value of `cpuInfo`. Subsequent reads from it will return its default value.
  public mutating func clearCpuInfo() {_storage._cpuInfo = nil}

  /// Other devices that are attached and relevant (e.g. GPUInfo).
  public var deviceInfo: [SwiftProtobuf.Google_Protobuf_Any] {
    get {return _storage._deviceInfo}
    set {_uniqueStorage()._deviceInfo = newValue}
  }

  /// Devices accessible to the test (e.g. as given by list_local_devices).
  public var availableDeviceInfo: [Tensorflow_AvailableDeviceInfo] {
    get {return _storage._availableDeviceInfo}
    set {_uniqueStorage()._availableDeviceInfo = newValue}
  }

  public var memoryInfo: Tensorflow_MemoryInfo {
    get {return _storage._memoryInfo ?? Tensorflow_MemoryInfo()}
    set {_uniqueStorage()._memoryInfo = newValue}
  }
  /// Returns true if `memoryInfo` has been explicitly set.
  public var hasMemoryInfo: Bool {return _storage._memoryInfo != nil}
  /// Clears the value of `memoryInfo`. Subsequent reads from it will return its default value.
  public mutating func clearMemoryInfo() {_storage._memoryInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._hostname)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._platformInfo)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._cpuInfo)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._deviceInfo)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._availableDeviceInfo)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._memoryInfo)
        case 7: try decoder.decodeSingularStringField(value: &_storage._serialIdentifier)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hostname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hostname, fieldNumber: 1)
      }
      if let v = _storage._platformInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._cpuInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._deviceInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._deviceInfo, fieldNumber: 4)
      }
      if !_storage._availableDeviceInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._availableDeviceInfo, fieldNumber: 5)
      }
      if let v = _storage._memoryInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._serialIdentifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serialIdentifier, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Run-specific items such as arguments to the test / benchmark.
public struct Tensorflow_RunConfiguration: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RunConfiguration"

  public var argument: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.argument)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.argument.isEmpty {
      try visitor.visitRepeatedStringField(value: self.argument, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// The output of one benchmark / test run.  Each run contains a list of
/// tests or benchmarks, stored as BenchmarkEntry messages.
///
/// This message should be emitted by the reporter (which runs the
/// test / BM in a subprocess and then reads the emitted BenchmarkEntry messages;
/// usually from a serialized json file, finally collecting them along
/// with additional information about the test run.
public struct Tensorflow_TestResults: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TestResults"

  /// The target of the run, e.g.:
  ///  //tensorflow/core:kernels_adjust_contrast_op_benchmark_test
  public var target: String {
    get {return _storage._target}
    set {_uniqueStorage()._target = newValue}
  }

  /// The list of tests or benchmarks in this run.
  public var entries: Tensorflow_BenchmarkEntries {
    get {return _storage._entries ?? Tensorflow_BenchmarkEntries()}
    set {_uniqueStorage()._entries = newValue}
  }
  /// Returns true if `entries` has been explicitly set.
  public var hasEntries: Bool {return _storage._entries != nil}
  /// Clears the value of `entries`. Subsequent reads from it will return its default value.
  public mutating func clearEntries() {_storage._entries = nil}

  /// The configuration of the build (compiled opt? with cuda? any copts?)
  public var buildConfiguration: Tensorflow_BuildConfiguration {
    get {return _storage._buildConfiguration ?? Tensorflow_BuildConfiguration()}
    set {_uniqueStorage()._buildConfiguration = newValue}
  }
  /// Returns true if `buildConfiguration` has been explicitly set.
  public var hasBuildConfiguration: Bool {return _storage._buildConfiguration != nil}
  /// Clears the value of `buildConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearBuildConfiguration() {_storage._buildConfiguration = nil}

  /// The commit id (git hash or changelist)
  public var commitID: Tensorflow_CommitId {
    get {return _storage._commitID ?? Tensorflow_CommitId()}
    set {_uniqueStorage()._commitID = newValue}
  }
  /// Returns true if `commitID` has been explicitly set.
  public var hasCommitID: Bool {return _storage._commitID != nil}
  /// Clears the value of `commitID`. Subsequent reads from it will return its default value.
  public mutating func clearCommitID() {_storage._commitID = nil}

  /// The time the run started (in seconds of UTC time since Unix epoch)
  public var startTime: Int64 {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  /// The amount of time the total run took (wall time in seconds)
  public var runTime: Double {
    get {return _storage._runTime}
    set {_uniqueStorage()._runTime = newValue}
  }

  /// Machine-specific parameters (Platform and CPU info)
  public var machineConfiguration: Tensorflow_MachineConfiguration {
    get {return _storage._machineConfiguration ?? Tensorflow_MachineConfiguration()}
    set {_uniqueStorage()._machineConfiguration = newValue}
  }
  /// Returns true if `machineConfiguration` has been explicitly set.
  public var hasMachineConfiguration: Bool {return _storage._machineConfiguration != nil}
  /// Clears the value of `machineConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearMachineConfiguration() {_storage._machineConfiguration = nil}

  /// Run-specific parameters (arguments, etc)
  public var runConfiguration: Tensorflow_RunConfiguration {
    get {return _storage._runConfiguration ?? Tensorflow_RunConfiguration()}
    set {_uniqueStorage()._runConfiguration = newValue}
  }
  /// Returns true if `runConfiguration` has been explicitly set.
  public var hasRunConfiguration: Bool {return _storage._runConfiguration != nil}
  /// Clears the value of `runConfiguration`. Subsequent reads from it will return its default value.
  public mutating func clearRunConfiguration() {_storage._runConfiguration = nil}

  /// Benchmark target identifier.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var benchmarkType: Tensorflow_TestResults.BenchmarkType {
    get {return _storage._benchmarkType}
    set {_uniqueStorage()._benchmarkType = newValue}
  }

  /// Used for differentiating between continuous and debug builds.
  public var runMode: String {
    get {return _storage._runMode}
    set {_uniqueStorage()._runMode = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of benchmark.
  public enum BenchmarkType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Fallback for protos written before Type was introduced.
    case unknown // = 0
    case cppMicrobenchmark // = 1
    case pythonBenchmark // = 2
    case androidBenchmark // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .cppMicrobenchmark
      case 2: self = .pythonBenchmark
      case 3: self = .androidBenchmark
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .cppMicrobenchmark: return 1
      case .pythonBenchmark: return 2
      case .androidBenchmark: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._target)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._entries)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._buildConfiguration)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._commitID)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._startTime)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._runTime)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._machineConfiguration)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._runConfiguration)
        case 9: try decoder.decodeSingularStringField(value: &_storage._name)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._benchmarkType)
        case 11: try decoder.decodeSingularStringField(value: &_storage._runMode)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._target.isEmpty {
        try visitor.visitSingularStringField(value: _storage._target, fieldNumber: 1)
      }
      if let v = _storage._entries {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._buildConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._commitID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._startTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTime, fieldNumber: 5)
      }
      if _storage._runTime != 0 {
        try visitor.visitSingularDoubleField(value: _storage._runTime, fieldNumber: 6)
      }
      if let v = _storage._machineConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._runConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 9)
      }
      if _storage._benchmarkType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._benchmarkType, fieldNumber: 10)
      }
      if !_storage._runMode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._runMode, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_EntryValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "double_value"),
    2: .standard(proto: "string_value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_EntryValue) -> Bool {
    if self.kind != other.kind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_BenchmarkEntry: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "iters"),
    3: .standard(proto: "cpu_time"),
    4: .standard(proto: "wall_time"),
    5: .same(proto: "throughput"),
    6: .same(proto: "extras"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_BenchmarkEntry) -> Bool {
    if self.name != other.name {return false}
    if self.iters != other.iters {return false}
    if self.cpuTime != other.cpuTime {return false}
    if self.wallTime != other.wallTime {return false}
    if self.throughput != other.throughput {return false}
    if self.extras != other.extras {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_BenchmarkEntries: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entry"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_BenchmarkEntries) -> Bool {
    if self.entry != other.entry {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_BuildConfiguration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "cc_flags"),
    3: .same(proto: "opts"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_BuildConfiguration) -> Bool {
    if self.mode != other.mode {return false}
    if self.ccFlags != other.ccFlags {return false}
    if self.opts != other.opts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_CommitId: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "changelist"),
    2: .same(proto: "hash"),
    3: .same(proto: "snapshot"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CommitId) -> Bool {
    if self.kind != other.kind {return false}
    if self.snapshot != other.snapshot {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_CPUInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_cores"),
    2: .standard(proto: "num_cores_allowed"),
    3: .standard(proto: "mhz_per_cpu"),
    4: .standard(proto: "cpu_info"),
    5: .standard(proto: "cpu_governor"),
    6: .standard(proto: "cache_size"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_CPUInfo) -> Bool {
    if self.numCores != other.numCores {return false}
    if self.numCoresAllowed != other.numCoresAllowed {return false}
    if self.mhzPerCpu != other.mhzPerCpu {return false}
    if self.cpuInfo != other.cpuInfo {return false}
    if self.cpuGovernor != other.cpuGovernor {return false}
    if self.cacheSize != other.cacheSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_MemoryInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "available"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_MemoryInfo) -> Bool {
    if self.total != other.total {return false}
    if self.available != other.available {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_GPUInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    2: .same(proto: "uuid"),
    3: .standard(proto: "bus_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_GPUInfo) -> Bool {
    if self.model != other.model {return false}
    if self.uuid != other.uuid {return false}
    if self.busID != other.busID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_PlatformInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bits"),
    2: .same(proto: "linkage"),
    3: .same(proto: "machine"),
    4: .same(proto: "release"),
    5: .same(proto: "system"),
    6: .same(proto: "version"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_PlatformInfo) -> Bool {
    if self.bits != other.bits {return false}
    if self.linkage != other.linkage {return false}
    if self.machine != other.machine {return false}
    if self.release != other.release {return false}
    if self.system != other.system {return false}
    if self.version != other.version {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_AvailableDeviceInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .standard(proto: "memory_limit"),
    4: .standard(proto: "physical_description"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_AvailableDeviceInfo) -> Bool {
    if self.name != other.name {return false}
    if self.type != other.type {return false}
    if self.memoryLimit != other.memoryLimit {return false}
    if self.physicalDescription != other.physicalDescription {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_MachineConfiguration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hostname"),
    7: .standard(proto: "serial_identifier"),
    2: .standard(proto: "platform_info"),
    3: .standard(proto: "cpu_info"),
    4: .standard(proto: "device_info"),
    5: .standard(proto: "available_device_info"),
    6: .standard(proto: "memory_info"),
  ]

  fileprivate class _StorageClass {
    var _hostname: String = String()
    var _serialIdentifier: String = String()
    var _platformInfo: Tensorflow_PlatformInfo? = nil
    var _cpuInfo: Tensorflow_CPUInfo? = nil
    var _deviceInfo: [SwiftProtobuf.Google_Protobuf_Any] = []
    var _availableDeviceInfo: [Tensorflow_AvailableDeviceInfo] = []
    var _memoryInfo: Tensorflow_MemoryInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hostname = source._hostname
      _serialIdentifier = source._serialIdentifier
      _platformInfo = source._platformInfo
      _cpuInfo = source._cpuInfo
      _deviceInfo = source._deviceInfo
      _availableDeviceInfo = source._availableDeviceInfo
      _memoryInfo = source._memoryInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_MachineConfiguration) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._hostname != other_storage._hostname {return false}
        if _storage._serialIdentifier != other_storage._serialIdentifier {return false}
        if _storage._platformInfo != other_storage._platformInfo {return false}
        if _storage._cpuInfo != other_storage._cpuInfo {return false}
        if _storage._deviceInfo != other_storage._deviceInfo {return false}
        if _storage._availableDeviceInfo != other_storage._availableDeviceInfo {return false}
        if _storage._memoryInfo != other_storage._memoryInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_RunConfiguration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "argument"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_RunConfiguration) -> Bool {
    if self.argument != other.argument {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_TestResults: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "entries"),
    3: .standard(proto: "build_configuration"),
    4: .standard(proto: "commit_id"),
    5: .standard(proto: "start_time"),
    6: .standard(proto: "run_time"),
    7: .standard(proto: "machine_configuration"),
    8: .standard(proto: "run_configuration"),
    9: .same(proto: "name"),
    10: .standard(proto: "benchmark_type"),
    11: .standard(proto: "run_mode"),
  ]

  fileprivate class _StorageClass {
    var _target: String = String()
    var _entries: Tensorflow_BenchmarkEntries? = nil
    var _buildConfiguration: Tensorflow_BuildConfiguration? = nil
    var _commitID: Tensorflow_CommitId? = nil
    var _startTime: Int64 = 0
    var _runTime: Double = 0
    var _machineConfiguration: Tensorflow_MachineConfiguration? = nil
    var _runConfiguration: Tensorflow_RunConfiguration? = nil
    var _name: String = String()
    var _benchmarkType: Tensorflow_TestResults.BenchmarkType = .unknown
    var _runMode: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _entries = source._entries
      _buildConfiguration = source._buildConfiguration
      _commitID = source._commitID
      _startTime = source._startTime
      _runTime = source._runTime
      _machineConfiguration = source._machineConfiguration
      _runConfiguration = source._runConfiguration
      _name = source._name
      _benchmarkType = source._benchmarkType
      _runMode = source._runMode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_TestResults) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._target != other_storage._target {return false}
        if _storage._entries != other_storage._entries {return false}
        if _storage._buildConfiguration != other_storage._buildConfiguration {return false}
        if _storage._commitID != other_storage._commitID {return false}
        if _storage._startTime != other_storage._startTime {return false}
        if _storage._runTime != other_storage._runTime {return false}
        if _storage._machineConfiguration != other_storage._machineConfiguration {return false}
        if _storage._runConfiguration != other_storage._runConfiguration {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._benchmarkType != other_storage._benchmarkType {return false}
        if _storage._runMode != other_storage._runMode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_TestResults.BenchmarkType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CPP_MICROBENCHMARK"),
    2: .same(proto: "PYTHON_BENCHMARK"),
    3: .same(proto: "ANDROID_BENCHMARK"),
  ]
}
