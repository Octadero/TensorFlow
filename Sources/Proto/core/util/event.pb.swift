// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/core/util/event.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Current health status of a worker.
public enum Tensorflow_WorkerHealth: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// By default a worker is healthy.
  case ok // = 0
  case receivedShutdownSignal // = 1
  case internalError // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .receivedShutdownSignal
    case 2: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .receivedShutdownSignal: return 1
    case .internalError: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Indicates the behavior of the worker when an internal error or shutdown
/// signal is received.
public enum Tensorflow_WorkerShutdownMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `default` // = 0
  case shutdownImmediately // = 1
  case waitForCoordinator // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .shutdownImmediately
    case 2: self = .waitForCoordinator
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .shutdownImmediately: return 1
    case .waitForCoordinator: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Protocol buffer representing an event that happened during
/// the execution of a Brain model.
public struct Tensorflow_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp of the event.
  public var wallTime: Double {
    get {return _storage._wallTime}
    set {_uniqueStorage()._wallTime = newValue}
  }

  /// Global step of the event.
  public var step: Int64 {
    get {return _storage._step}
    set {_uniqueStorage()._step = newValue}
  }

  public var what: OneOf_What? {
    get {return _storage._what}
    set {_uniqueStorage()._what = newValue}
  }

  /// An event file was started, with the specified version.
  /// This is use to identify the contents of the record IO files
  /// easily.  Current version is "brain.Event:2".  All versions
  /// start with "brain.Event:".
  public var fileVersion: String {
    get {
      if case .fileVersion(let v)? = _storage._what {return v}
      return String()
    }
    set {_uniqueStorage()._what = .fileVersion(newValue)}
  }

  /// An encoded version of a GraphDef.
  public var graphDef: Data {
    get {
      if case .graphDef(let v)? = _storage._what {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._what = .graphDef(newValue)}
  }

  /// A summary was generated.
  public var summary: Tensorflow_Summary {
    get {
      if case .summary(let v)? = _storage._what {return v}
      return Tensorflow_Summary()
    }
    set {_uniqueStorage()._what = .summary(newValue)}
  }

  /// The user output a log message. Not all messages are logged, only ones
  /// generated via the Python tensorboard_logging module.
  public var logMessage: Tensorflow_LogMessage {
    get {
      if case .logMessage(let v)? = _storage._what {return v}
      return Tensorflow_LogMessage()
    }
    set {_uniqueStorage()._what = .logMessage(newValue)}
  }

  /// The state of the session which can be used for restarting after crashes.
  public var sessionLog: Tensorflow_SessionLog {
    get {
      if case .sessionLog(let v)? = _storage._what {return v}
      return Tensorflow_SessionLog()
    }
    set {_uniqueStorage()._what = .sessionLog(newValue)}
  }

  /// The metadata returned by running a session.run() call.
  public var taggedRunMetadata: Tensorflow_TaggedRunMetadata {
    get {
      if case .taggedRunMetadata(let v)? = _storage._what {return v}
      return Tensorflow_TaggedRunMetadata()
    }
    set {_uniqueStorage()._what = .taggedRunMetadata(newValue)}
  }

  /// An encoded version of a MetaGraphDef.
  public var metaGraphDef: Data {
    get {
      if case .metaGraphDef(let v)? = _storage._what {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._what = .metaGraphDef(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_What: Equatable {
    /// An event file was started, with the specified version.
    /// This is use to identify the contents of the record IO files
    /// easily.  Current version is "brain.Event:2".  All versions
    /// start with "brain.Event:".
    case fileVersion(String)
    /// An encoded version of a GraphDef.
    case graphDef(Data)
    /// A summary was generated.
    case summary(Tensorflow_Summary)
    /// The user output a log message. Not all messages are logged, only ones
    /// generated via the Python tensorboard_logging module.
    case logMessage(Tensorflow_LogMessage)
    /// The state of the session which can be used for restarting after crashes.
    case sessionLog(Tensorflow_SessionLog)
    /// The metadata returned by running a session.run() call.
    case taggedRunMetadata(Tensorflow_TaggedRunMetadata)
    /// An encoded version of a MetaGraphDef.
    case metaGraphDef(Data)

    public static func ==(lhs: Tensorflow_Event.OneOf_What, rhs: Tensorflow_Event.OneOf_What) -> Bool {
      switch (lhs, rhs) {
      case (.fileVersion(let l), .fileVersion(let r)): return l == r
      case (.graphDef(let l), .graphDef(let r)): return l == r
      case (.summary(let l), .summary(let r)): return l == r
      case (.logMessage(let l), .logMessage(let r)): return l == r
      case (.sessionLog(let l), .sessionLog(let r)): return l == r
      case (.taggedRunMetadata(let l), .taggedRunMetadata(let r)): return l == r
      case (.metaGraphDef(let l), .metaGraphDef(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Protocol buffer used for logging messages to the events file.
public struct Tensorflow_LogMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var level: Tensorflow_LogMessage.Level = .unknown

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Level: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// Note: The logging level 10 cannot be named DEBUG. Some software
    /// projects compile their C/C++ code with -DDEBUG in debug builds. So the
    /// C++ code generated from this file should not have an identifier named
    /// DEBUG.
    case debugging // = 10
    case info // = 20
    case warn // = 30
    case error // = 40
    case fatal // = 50
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 10: self = .debugging
      case 20: self = .info
      case 30: self = .warn
      case 40: self = .error
      case 50: self = .fatal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .debugging: return 10
      case .info: return 20
      case .warn: return 30
      case .error: return 40
      case .fatal: return 50
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

/// Protocol buffer used for logging session state.
public struct Tensorflow_SessionLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Tensorflow_SessionLog.SessionStatus = .statusUnspecified

  /// This checkpoint_path contains both the path and filename.
  public var checkpointPath: String = String()

  public var msg: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum SessionStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case statusUnspecified // = 0
    case start // = 1
    case stop // = 2
    case checkpoint // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .statusUnspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .statusUnspecified
      case 1: self = .start
      case 2: self = .stop
      case 3: self = .checkpoint
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .statusUnspecified: return 0
      case .start: return 1
      case .stop: return 2
      case .checkpoint: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

/// For logging the metadata output for a single session.run() call.
public struct Tensorflow_TaggedRunMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Tag name associated with this metadata.
  public var tag: String = String()

  /// Byte-encoded version of the `RunMetadata` proto in order to allow lazy
  /// deserialization.
  public var runMetadata: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_WatchdogConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeoutMs: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tensorflow_WorkerHeartbeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var shutdownMode: Tensorflow_WorkerShutdownMode {
    get {return _storage._shutdownMode}
    set {_uniqueStorage()._shutdownMode = newValue}
  }

  public var watchdogConfig: Tensorflow_WatchdogConfig {
    get {return _storage._watchdogConfig ?? Tensorflow_WatchdogConfig()}
    set {_uniqueStorage()._watchdogConfig = newValue}
  }
  /// Returns true if `watchdogConfig` has been explicitly set.
  public var hasWatchdogConfig: Bool {return _storage._watchdogConfig != nil}
  /// Clears the value of `watchdogConfig`. Subsequent reads from it will return its default value.
  public mutating func clearWatchdogConfig() {_storage._watchdogConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_WorkerHeartbeatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var healthStatus: Tensorflow_WorkerHealth = .ok

  public var workerLog: [Tensorflow_Event] = []

  public var hostname: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_WorkerHealth: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "RECEIVED_SHUTDOWN_SIGNAL"),
    2: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Tensorflow_WorkerShutdownMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "SHUTDOWN_IMMEDIATELY"),
    2: .same(proto: "WAIT_FOR_COORDINATOR"),
  ]
}

extension Tensorflow_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wall_time"),
    2: .same(proto: "step"),
    3: .standard(proto: "file_version"),
    4: .standard(proto: "graph_def"),
    5: .same(proto: "summary"),
    6: .standard(proto: "log_message"),
    7: .standard(proto: "session_log"),
    8: .standard(proto: "tagged_run_metadata"),
    9: .standard(proto: "meta_graph_def"),
  ]

  fileprivate class _StorageClass {
    var _wallTime: Double = 0
    var _step: Int64 = 0
    var _what: Tensorflow_Event.OneOf_What?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _wallTime = source._wallTime
      _step = source._step
      _what = source._what
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &_storage._wallTime)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._step)
        case 3:
          if _storage._what != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._what = .fileVersion(v)}
        case 4:
          if _storage._what != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._what = .graphDef(v)}
        case 5:
          var v: Tensorflow_Summary?
          if let current = _storage._what {
            try decoder.handleConflictingOneOf()
            if case .summary(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._what = .summary(v)}
        case 6:
          var v: Tensorflow_LogMessage?
          if let current = _storage._what {
            try decoder.handleConflictingOneOf()
            if case .logMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._what = .logMessage(v)}
        case 7:
          var v: Tensorflow_SessionLog?
          if let current = _storage._what {
            try decoder.handleConflictingOneOf()
            if case .sessionLog(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._what = .sessionLog(v)}
        case 8:
          var v: Tensorflow_TaggedRunMetadata?
          if let current = _storage._what {
            try decoder.handleConflictingOneOf()
            if case .taggedRunMetadata(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._what = .taggedRunMetadata(v)}
        case 9:
          if _storage._what != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._what = .metaGraphDef(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._wallTime != 0 {
        try visitor.visitSingularDoubleField(value: _storage._wallTime, fieldNumber: 1)
      }
      if _storage._step != 0 {
        try visitor.visitSingularInt64Field(value: _storage._step, fieldNumber: 2)
      }
      switch _storage._what {
      case .fileVersion(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case .graphDef(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      case .summary(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .logMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .sessionLog(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .taggedRunMetadata(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .metaGraphDef(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Event) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._wallTime != other_storage._wallTime {return false}
        if _storage._step != other_storage._step {return false}
        if _storage._what != other_storage._what {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_LogMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.level)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != .unknown {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_LogMessage) -> Bool {
    if self.level != other.level {return false}
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_LogMessage.Level: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    10: .same(proto: "DEBUGGING"),
    20: .same(proto: "INFO"),
    30: .same(proto: "WARN"),
    40: .same(proto: "ERROR"),
    50: .same(proto: "FATAL"),
  ]
}

extension Tensorflow_SessionLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionLog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "checkpoint_path"),
    3: .same(proto: "msg"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.checkpointPath)
      case 3: try decoder.decodeSingularStringField(value: &self.msg)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .statusUnspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.checkpointPath.isEmpty {
      try visitor.visitSingularStringField(value: self.checkpointPath, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_SessionLog) -> Bool {
    if self.status != other.status {return false}
    if self.checkpointPath != other.checkpointPath {return false}
    if self.msg != other.msg {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_SessionLog.SessionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSPECIFIED"),
    1: .same(proto: "START"),
    2: .same(proto: "STOP"),
    3: .same(proto: "CHECKPOINT"),
  ]
}

extension Tensorflow_TaggedRunMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaggedRunMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .standard(proto: "run_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.tag)
      case 2: try decoder.decodeSingularBytesField(value: &self.runMetadata)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 1)
    }
    if !self.runMetadata.isEmpty {
      try visitor.visitSingularBytesField(value: self.runMetadata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_TaggedRunMetadata) -> Bool {
    if self.tag != other.tag {return false}
    if self.runMetadata != other.runMetadata {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_WatchdogConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WatchdogConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timeout_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timeoutMs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timeoutMs != 0 {
      try visitor.visitSingularInt64Field(value: self.timeoutMs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_WatchdogConfig) -> Bool {
    if self.timeoutMs != other.timeoutMs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_WorkerHeartbeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerHeartbeatRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shutdown_mode"),
    2: .standard(proto: "watchdog_config"),
  ]

  fileprivate class _StorageClass {
    var _shutdownMode: Tensorflow_WorkerShutdownMode = .default
    var _watchdogConfig: Tensorflow_WatchdogConfig? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shutdownMode = source._shutdownMode
      _watchdogConfig = source._watchdogConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._shutdownMode)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._watchdogConfig)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._shutdownMode != .default {
        try visitor.visitSingularEnumField(value: _storage._shutdownMode, fieldNumber: 1)
      }
      if let v = _storage._watchdogConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_WorkerHeartbeatRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._shutdownMode != other_storage._shutdownMode {return false}
        if _storage._watchdogConfig != other_storage._watchdogConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_WorkerHeartbeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerHeartbeatResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "health_status"),
    2: .standard(proto: "worker_log"),
    3: .same(proto: "hostname"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.healthStatus)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.workerLog)
      case 3: try decoder.decodeSingularStringField(value: &self.hostname)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.healthStatus != .ok {
      try visitor.visitSingularEnumField(value: self.healthStatus, fieldNumber: 1)
    }
    if !self.workerLog.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.workerLog, fieldNumber: 2)
    }
    if !self.hostname.isEmpty {
      try visitor.visitSingularStringField(value: self.hostname, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_WorkerHeartbeatResponse) -> Bool {
    if self.healthStatus != other.healthStatus {return false}
    if self.workerLog != other.workerLog {return false}
    if self.hostname != other.hostname {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
