// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/compiler/xla/service/gpu/backend_configs.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Backend config for a convolution that runs through cudnn.
public struct Xla_Gpu_CudnnConvBackendConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Opaque algorithm number of cudnn algorithm chosen for this conv.
  public var algorithm: Int64 = 0

  /// Whether we may use tensor cores when running this conv.  Even if this is
  /// true, cudnn may choose not to use tensor cores, e.g. because the GPU or
  /// selected algorithm doesn't support it.
  public var tensorOpsEnabled: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xla.gpu"

extension Xla_Gpu_CudnnConvBackendConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CudnnConvBackendConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "algorithm"),
    2: .standard(proto: "tensor_ops_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.algorithm)
      case 2: try decoder.decodeSingularBoolField(value: &self.tensorOpsEnabled)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.algorithm != 0 {
      try visitor.visitSingularInt64Field(value: self.algorithm, fieldNumber: 1)
    }
    if self.tensorOpsEnabled != false {
      try visitor.visitSingularBoolField(value: self.tensorOpsEnabled, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Xla_Gpu_CudnnConvBackendConfig) -> Bool {
    if self.algorithm != other.algorithm {return false}
    if self.tensorOpsEnabled != other.tensorOpsEnabled {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
