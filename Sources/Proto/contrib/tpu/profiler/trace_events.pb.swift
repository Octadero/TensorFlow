// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/tpu/profiler/trace_events.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A 'Trace' contains metadata for the individual traces of a system.
public struct Tensorflow_Tpu_Trace: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Trace"

  /// The devices that this trace has information about. Maps from device_id to
  /// more data about the specific device.
  public var devices: Dictionary<UInt32,Tensorflow_Tpu_Device> = [:]

  /// All trace events capturing in the profiling period.
  public var traceEvents: [Tensorflow_Tpu_TraceEvent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,Tensorflow_Tpu_Device>.self, value: &self.devices)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.traceEvents)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.devices.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,Tensorflow_Tpu_Device>.self, value: self.devices, fieldNumber: 1)
    }
    if !self.traceEvents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.traceEvents, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// A 'device' is a physical entity in the system and is comprised of several
/// resources.
public struct Tensorflow_Tpu_Device: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Device"

  /// The name of the device.
  public var name: String = String()

  /// The id of this device, unique in a single trace.
  public var deviceID: UInt32 = 0

  /// The resources on this device, keyed by resource_id;
  public var resources: Dictionary<UInt32,Tensorflow_Tpu_Resource> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.deviceID)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,Tensorflow_Tpu_Resource>.self, value: &self.resources)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularUInt32Field(value: self.deviceID, fieldNumber: 2)
    }
    if !self.resources.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,Tensorflow_Tpu_Resource>.self, value: self.resources, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// A 'resource' generally is a specific computation component on a device. These
/// can range from threads on CPUs to specific arithmetic units on hardware
/// devices.
public struct Tensorflow_Tpu_Resource: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Resource"

  /// The name of the resource.
  public var name: String = String()

  /// The id of the resource. Unique within a device.
  public var resourceID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.resourceID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.resourceID != 0 {
      try visitor.visitSingularUInt32Field(value: self.resourceID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tpu_TraceEvent: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TraceEvent"

  /// The id of the device that this event occurred on. The full dataset should
  /// have this device present in the Trace object.
  public var deviceID: UInt32 = 0

  /// The id of the resource that this event occurred on. The full dataset should
  /// have this resource present in the Device object of the Trace object. A
  /// resource_id is unique on a specific device, but not necessarily within the
  /// trace.
  public var resourceID: UInt32 = 0

  /// The name of this trace event.
  public var name: String = String()

  /// The timestamp that this event occurred at (in picos since tracing started).
  public var timestampPs: UInt64 = 0

  /// The duration of the event in picoseconds if applicable.
  /// Events without duration are called instant events.
  public var durationPs: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.deviceID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.resourceID)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 9: try decoder.decodeSingularUInt64Field(value: &self.timestampPs)
      case 10: try decoder.decodeSingularUInt64Field(value: &self.durationPs)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deviceID != 0 {
      try visitor.visitSingularUInt32Field(value: self.deviceID, fieldNumber: 1)
    }
    if self.resourceID != 0 {
      try visitor.visitSingularUInt32Field(value: self.resourceID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.timestampPs != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestampPs, fieldNumber: 9)
    }
    if self.durationPs != 0 {
      try visitor.visitSingularUInt64Field(value: self.durationPs, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.tpu"

extension Tensorflow_Tpu_Trace: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "devices"),
    4: .standard(proto: "trace_events"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tpu_Trace) -> Bool {
    if self.devices != other.devices {return false}
    if self.traceEvents != other.traceEvents {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tpu_Device: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "device_id"),
    3: .same(proto: "resources"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tpu_Device) -> Bool {
    if self.name != other.name {return false}
    if self.deviceID != other.deviceID {return false}
    if self.resources != other.resources {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tpu_Resource: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "resource_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tpu_Resource) -> Bool {
    if self.name != other.name {return false}
    if self.resourceID != other.resourceID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tpu_TraceEvent: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "resource_id"),
    3: .same(proto: "name"),
    9: .standard(proto: "timestamp_ps"),
    10: .standard(proto: "duration_ps"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tpu_TraceEvent) -> Bool {
    if self.deviceID != other.deviceID {return false}
    if self.resourceID != other.resourceID {return false}
    if self.name != other.name {return false}
    if self.timestampPs != other.timestampPs {return false}
    if self.durationPs != other.durationPs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
