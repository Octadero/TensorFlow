// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/tpu/proto/topology.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Describes the geometry of a TPU mesh.
public struct Tensorflow_Tpu_TopologyProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The dimensions of the TPU topology, in cores. Typically, this is a 3D
  /// topology [x, y, core], where the major dimensions correspond to TPU chips,
  /// and the minor dimension describes the number of cores on a multicore chip.
  public var meshShape: [Int32] = []

  /// Number of TensorFlow tasks in the cluster.
  public var numTasks: Int32 = 0

  /// Number of TPU devices per task.
  public var numTpuDevicesPerTask: Int32 = 0

  /// A flattened rank 3 int32 array with shape
  /// [num_tasks, num_tpu_devices_per_task, len(mesh_shape)].
  /// `tasks` is the number of tasks in the TPU cluster, `devices` is the number
  /// of TPU devices per task, and the minor dimension corresponds to a position
  /// in the TPU mesh topology. Each entry [task, device, axis] gives the
  /// `axis`-th coordinate in the topology of a task/device pair.
  public var deviceCoordinates: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.tpu"

extension Tensorflow_Tpu_TopologyProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TopologyProto"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mesh_shape"),
    2: .standard(proto: "num_tasks"),
    3: .standard(proto: "num_tpu_devices_per_task"),
    4: .standard(proto: "device_coordinates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.meshShape)
      case 2: try decoder.decodeSingularInt32Field(value: &self.numTasks)
      case 3: try decoder.decodeSingularInt32Field(value: &self.numTpuDevicesPerTask)
      case 4: try decoder.decodeRepeatedInt32Field(value: &self.deviceCoordinates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.meshShape.isEmpty {
      try visitor.visitPackedInt32Field(value: self.meshShape, fieldNumber: 1)
    }
    if self.numTasks != 0 {
      try visitor.visitSingularInt32Field(value: self.numTasks, fieldNumber: 2)
    }
    if self.numTpuDevicesPerTask != 0 {
      try visitor.visitSingularInt32Field(value: self.numTpuDevicesPerTask, fieldNumber: 3)
    }
    if !self.deviceCoordinates.isEmpty {
      try visitor.visitPackedInt32Field(value: self.deviceCoordinates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tpu_TopologyProto) -> Bool {
    if self.meshShape != other.meshShape {return false}
    if self.numTasks != other.numTasks {return false}
    if self.numTpuDevicesPerTask != other.numTpuDevicesPerTask {return false}
    if self.deviceCoordinates != other.deviceCoordinates {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
