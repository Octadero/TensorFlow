// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/boosted_trees/proto/quantiles.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct BoostedTrees_QuantileConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maximum eps error when computing quantile summaries.
  public var eps: Double = 0

  /// Number of quantiles to generate.
  public var numQuantiles: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct BoostedTrees_QuantileEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Value for the entry.
  public var value: Float = 0

  /// Weight for the entry.
  public var weight: Float = 0

  /// We need the minimum and maximum rank possible for this entry.
  /// Rank is 0.0 for the absolute minimum and sum of the weights for the maximum
  /// value in the input.
  public var minRank: Float = 0

  public var maxRank: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct BoostedTrees_QuantileSummaryState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [BoostedTrees_QuantileEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct BoostedTrees_QuantileStreamState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var summaries: [BoostedTrees_QuantileSummaryState] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "boosted_trees"

extension BoostedTrees_QuantileConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuantileConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eps"),
    2: .standard(proto: "num_quantiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.eps)
      case 2: try decoder.decodeSingularInt64Field(value: &self.numQuantiles)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eps != 0 {
      try visitor.visitSingularDoubleField(value: self.eps, fieldNumber: 1)
    }
    if self.numQuantiles != 0 {
      try visitor.visitSingularInt64Field(value: self.numQuantiles, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: BoostedTrees_QuantileConfig) -> Bool {
    if self.eps != other.eps {return false}
    if self.numQuantiles != other.numQuantiles {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension BoostedTrees_QuantileEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuantileEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "weight"),
    3: .standard(proto: "min_rank"),
    4: .standard(proto: "max_rank"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.value)
      case 2: try decoder.decodeSingularFloatField(value: &self.weight)
      case 3: try decoder.decodeSingularFloatField(value: &self.minRank)
      case 4: try decoder.decodeSingularFloatField(value: &self.maxRank)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 1)
    }
    if self.weight != 0 {
      try visitor.visitSingularFloatField(value: self.weight, fieldNumber: 2)
    }
    if self.minRank != 0 {
      try visitor.visitSingularFloatField(value: self.minRank, fieldNumber: 3)
    }
    if self.maxRank != 0 {
      try visitor.visitSingularFloatField(value: self.maxRank, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: BoostedTrees_QuantileEntry) -> Bool {
    if self.value != other.value {return false}
    if self.weight != other.weight {return false}
    if self.minRank != other.minRank {return false}
    if self.maxRank != other.maxRank {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension BoostedTrees_QuantileSummaryState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuantileSummaryState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: BoostedTrees_QuantileSummaryState) -> Bool {
    if self.entries != other.entries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension BoostedTrees_QuantileStreamState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuantileStreamState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summaries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.summaries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.summaries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.summaries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: BoostedTrees_QuantileStreamState) -> Bool {
    if self.summaries != other.summaries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
