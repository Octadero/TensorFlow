// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/boosted_trees/proto/split_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Gathered information for a split node.
public struct Tensorflow_BoostedTrees_Learner_SplitInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SplitInfo"

  /// The split node without the child nodes attached.
  public var splitNode: Tensorflow_BoostedTrees_Trees_TreeNode {
    get {return _storage._splitNode ?? Tensorflow_BoostedTrees_Trees_TreeNode()}
    set {_uniqueStorage()._splitNode = newValue}
  }
  /// Returns true if `splitNode` has been explicitly set.
  public var hasSplitNode: Bool {return _storage._splitNode != nil}
  /// Clears the value of `splitNode`. Subsequent reads from it will return its default value.
  public mutating func clearSplitNode() {_storage._splitNode = nil}

  /// Left Leaf node.
  public var leftChild: Tensorflow_BoostedTrees_Trees_Leaf {
    get {return _storage._leftChild ?? Tensorflow_BoostedTrees_Trees_Leaf()}
    set {_uniqueStorage()._leftChild = newValue}
  }
  /// Returns true if `leftChild` has been explicitly set.
  public var hasLeftChild: Bool {return _storage._leftChild != nil}
  /// Clears the value of `leftChild`. Subsequent reads from it will return its default value.
  public mutating func clearLeftChild() {_storage._leftChild = nil}

  /// Right Leaf node.
  public var rightChild: Tensorflow_BoostedTrees_Trees_Leaf {
    get {return _storage._rightChild ?? Tensorflow_BoostedTrees_Trees_Leaf()}
    set {_uniqueStorage()._rightChild = newValue}
  }
  /// Returns true if `rightChild` has been explicitly set.
  public var hasRightChild: Bool {return _storage._rightChild != nil}
  /// Clears the value of `rightChild`. Subsequent reads from it will return its default value.
  public mutating func clearRightChild() {_storage._rightChild = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._splitNode)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._leftChild)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rightChild)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._splitNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._leftChild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rightChild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.boosted_trees.learner"

extension Tensorflow_BoostedTrees_Learner_SplitInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "split_node"),
    2: .standard(proto: "left_child"),
    3: .standard(proto: "right_child"),
  ]

  fileprivate class _StorageClass {
    var _splitNode: Tensorflow_BoostedTrees_Trees_TreeNode? = nil
    var _leftChild: Tensorflow_BoostedTrees_Trees_Leaf? = nil
    var _rightChild: Tensorflow_BoostedTrees_Trees_Leaf? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _splitNode = source._splitNode
      _leftChild = source._leftChild
      _rightChild = source._rightChild
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_BoostedTrees_Learner_SplitInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._splitNode != other_storage._splitNode {return false}
        if _storage._leftChild != other_storage._leftChild {return false}
        if _storage._rightChild != other_storage._rightChild {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
