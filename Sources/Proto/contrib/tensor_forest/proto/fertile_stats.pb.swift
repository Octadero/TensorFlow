// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/tensor_forest/proto/fertile_stats.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_Tensorforest_FertileStats: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FertileStats"

  /// Tracks stats for each node.  node_to_slot[i] is the FertileSlot for node i.
  /// This may be sized to max_nodes initially, or grow dynamically as needed.
  public var nodeToSlot: [Tensorflow_Tensorforest_FertileSlot] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodeToSlot)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeToSlot.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeToSlot, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tensorforest_GiniStats: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GiniStats"

  /// This allows us to quickly track and calculate impurity (classification)
  ///  by storing the sum of input weights and the sum of the squares of the
  /// input weights.  Weighted gini is then: 1 - (square / sum * sum).
  /// Updates to these numbers are:
  ///   old_i = leaf->value(label)
  ///   new_i = old_i + incoming_weight
  ///   sum -> sum + incoming_weight
  ///   square -> square - (old_i ^ 2) + (new_i ^ 2)
  ///   total_left_sum -> total_left_sum - old_left_i * old_total_i +
  ///                                      new_left_i * new_total_i
  public var square: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFloatField(value: &self.square)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.square != 0 {
      try visitor.visitSingularFloatField(value: self.square, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Tensorforest_LeafStat: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LeafStat"

  /// The sum of the weights of the training examples that we have seen.
  /// This is here, outside of the leaf_stat oneof, because almost all
  /// types will want it.
  public var weightSum: Float {
    get {return _storage._weightSum}
    set {_uniqueStorage()._weightSum = newValue}
  }

  public var leafStat: OneOf_LeafStat? {
    get {return _storage._leafStat}
    set {_uniqueStorage()._leafStat = newValue}
  }

  public var classification: Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats {
    get {
      if case .classification(let v)? = _storage._leafStat {return v}
      return Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats()
    }
    set {_uniqueStorage()._leafStat = .classification(newValue)}
  }

  /// TODO(thomaswc): Add in v5's SparseClassStats.
  public var regression: Tensorflow_Tensorforest_LeafStat.LeastSquaresRegressionStats {
    get {
      if case .regression(let v)? = _storage._leafStat {return v}
      return Tensorflow_Tensorforest_LeafStat.LeastSquaresRegressionStats()
    }
    set {_uniqueStorage()._leafStat = .regression(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_LeafStat: Equatable {
    case classification(Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats)
    /// TODO(thomaswc): Add in v5's SparseClassStats.
    case regression(Tensorflow_Tensorforest_LeafStat.LeastSquaresRegressionStats)

    public static func ==(lhs: Tensorflow_Tensorforest_LeafStat.OneOf_LeafStat, rhs: Tensorflow_Tensorforest_LeafStat.OneOf_LeafStat) -> Bool {
      switch (lhs, rhs) {
      case (.classification(let l), .classification(let r)): return l == r
      case (.regression(let l), .regression(let r)): return l == r
      default: return false
      }
    }
  }

  /// TODO(thomaswc): Move the GiniStats out of LeafStats and into something
  /// that only tracks them for splits.
  public struct GiniImpurityClassificationStats: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Tensorforest_LeafStat.protoMessageName + ".GiniImpurityClassificationStats"

    public var counts: OneOf_Counts? {
      get {return _storage._counts}
      set {_uniqueStorage()._counts = newValue}
    }

    public var denseCounts: Tensorflow_DecisionTrees_Vector {
      get {
        if case .denseCounts(let v)? = _storage._counts {return v}
        return Tensorflow_DecisionTrees_Vector()
      }
      set {_uniqueStorage()._counts = .denseCounts(newValue)}
    }

    public var sparseCounts: Tensorflow_DecisionTrees_SparseVector {
      get {
        if case .sparseCounts(let v)? = _storage._counts {return v}
        return Tensorflow_DecisionTrees_SparseVector()
      }
      set {_uniqueStorage()._counts = .sparseCounts(newValue)}
    }

    public var gini: Tensorflow_Tensorforest_GiniStats {
      get {return _storage._gini ?? Tensorflow_Tensorforest_GiniStats()}
      set {_uniqueStorage()._gini = newValue}
    }
    /// Returns true if `gini` has been explicitly set.
    public var hasGini: Bool {return _storage._gini != nil}
    /// Clears the value of `gini`. Subsequent reads from it will return its default value.
    public mutating func clearGini() {_storage._gini = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Counts: Equatable {
      case denseCounts(Tensorflow_DecisionTrees_Vector)
      case sparseCounts(Tensorflow_DecisionTrees_SparseVector)

      public static func ==(lhs: Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats.OneOf_Counts, rhs: Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats.OneOf_Counts) -> Bool {
        switch (lhs, rhs) {
        case (.denseCounts(let l), .denseCounts(let r)): return l == r
        case (.sparseCounts(let l), .sparseCounts(let r)): return l == r
        default: return false
        }
      }
    }

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1:
            var v: Tensorflow_DecisionTrees_Vector?
            if let current = _storage._counts {
              try decoder.handleConflictingOneOf()
              if case .denseCounts(let m) = current {v = m}
            }
            try decoder.decodeSingularMessageField(value: &v)
            if let v = v {_storage._counts = .denseCounts(v)}
          case 2:
            var v: Tensorflow_DecisionTrees_SparseVector?
            if let current = _storage._counts {
              try decoder.handleConflictingOneOf()
              if case .sparseCounts(let m) = current {v = m}
            }
            try decoder.decodeSingularMessageField(value: &v)
            if let v = v {_storage._counts = .sparseCounts(v)}
          case 3: try decoder.decodeSingularMessageField(value: &_storage._gini)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        switch _storage._counts {
        case .denseCounts(let v)?:
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        case .sparseCounts(let v)?:
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        case nil: break
        }
        if let v = _storage._gini {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// This is the info needed for calculating variance for regression.
  /// Variance will still have to be summed over every output, but the
  /// number of outputs in regression problems is almost always 1.
  public struct LeastSquaresRegressionStats: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Tensorforest_LeafStat.protoMessageName + ".LeastSquaresRegressionStats"

    public var meanOutput: Tensorflow_DecisionTrees_Vector {
      get {return _storage._meanOutput ?? Tensorflow_DecisionTrees_Vector()}
      set {_uniqueStorage()._meanOutput = newValue}
    }
    /// Returns true if `meanOutput` has been explicitly set.
    public var hasMeanOutput: Bool {return _storage._meanOutput != nil}
    /// Clears the value of `meanOutput`. Subsequent reads from it will return its default value.
    public mutating func clearMeanOutput() {_storage._meanOutput = nil}

    public var meanOutputSquares: Tensorflow_DecisionTrees_Vector {
      get {return _storage._meanOutputSquares ?? Tensorflow_DecisionTrees_Vector()}
      set {_uniqueStorage()._meanOutputSquares = newValue}
    }
    /// Returns true if `meanOutputSquares` has been explicitly set.
    public var hasMeanOutputSquares: Bool {return _storage._meanOutputSquares != nil}
    /// Clears the value of `meanOutputSquares`. Subsequent reads from it will return its default value.
    public mutating func clearMeanOutputSquares() {_storage._meanOutputSquares = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._meanOutput)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._meanOutputSquares)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._meanOutput {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._meanOutputSquares {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats?
          if let current = _storage._leafStat {
            try decoder.handleConflictingOneOf()
            if case .classification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._leafStat = .classification(v)}
        case 2:
          var v: Tensorflow_Tensorforest_LeafStat.LeastSquaresRegressionStats?
          if let current = _storage._leafStat {
            try decoder.handleConflictingOneOf()
            if case .regression(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._leafStat = .regression(v)}
        case 3: try decoder.decodeSingularFloatField(value: &_storage._weightSum)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._leafStat {
      case .classification(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .regression(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
      if _storage._weightSum != 0 {
        try visitor.visitSingularFloatField(value: _storage._weightSum, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Tensorforest_FertileSlot: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FertileSlot"

  /// The statistics for *all* the examples seen at this leaf.
  public var leafStats: Tensorflow_Tensorforest_LeafStat {
    get {return _storage._leafStats ?? Tensorflow_Tensorforest_LeafStat()}
    set {_uniqueStorage()._leafStats = newValue}
  }
  /// Returns true if `leafStats` has been explicitly set.
  public var hasLeafStats: Bool {return _storage._leafStats != nil}
  /// Clears the value of `leafStats`. Subsequent reads from it will return its default value.
  public mutating func clearLeafStats() {_storage._leafStats = nil}

  public var candidates: [Tensorflow_Tensorforest_SplitCandidate] {
    get {return _storage._candidates}
    set {_uniqueStorage()._candidates = newValue}
  }

  /// The statistics for the examples seen at this leaf after all the
  /// splits have been initialized.  If post_init_leaf_stats.weight_sum
  /// is > 0, then all candidates have been initialized.  We need to track
  /// both leaf_stats and post_init_leaf_stats because the first is used
  /// to create the decision_tree::Leaf and the second is used to infer
  /// the statistics for the right side of a split (given the leaf side
  /// stats).
  public var postInitLeafStats: Tensorflow_Tensorforest_LeafStat {
    get {return _storage._postInitLeafStats ?? Tensorflow_Tensorforest_LeafStat()}
    set {_uniqueStorage()._postInitLeafStats = newValue}
  }
  /// Returns true if `postInitLeafStats` has been explicitly set.
  public var hasPostInitLeafStats: Bool {return _storage._postInitLeafStats != nil}
  /// Clears the value of `postInitLeafStats`. Subsequent reads from it will return its default value.
  public mutating func clearPostInitLeafStats() {_storage._postInitLeafStats = nil}

  public var nodeID: Int32 {
    get {return _storage._nodeID}
    set {_uniqueStorage()._nodeID = newValue}
  }

  public var depth: Int32 {
    get {return _storage._depth}
    set {_uniqueStorage()._depth = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._candidates)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._leafStats)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._nodeID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._postInitLeafStats)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._depth)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._candidates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._candidates, fieldNumber: 1)
      }
      if let v = _storage._leafStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._nodeID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nodeID, fieldNumber: 5)
      }
      if let v = _storage._postInitLeafStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._depth != 0 {
        try visitor.visitSingularInt32Field(value: _storage._depth, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Tensorforest_SplitCandidate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SplitCandidate"

  /// proto representing the potential node.
  public var split: Tensorflow_DecisionTrees_BinaryNode {
    get {return _storage._split ?? Tensorflow_DecisionTrees_BinaryNode()}
    set {_uniqueStorage()._split = newValue}
  }
  /// Returns true if `split` has been explicitly set.
  public var hasSplit: Bool {return _storage._split != nil}
  /// Clears the value of `split`. Subsequent reads from it will return its default value.
  public mutating func clearSplit() {_storage._split = nil}

  /// Right counts are inferred from FertileSlot.leaf_stats and left.
  public var leftStats: Tensorflow_Tensorforest_LeafStat {
    get {return _storage._leftStats ?? Tensorflow_Tensorforest_LeafStat()}
    set {_uniqueStorage()._leftStats = newValue}
  }
  /// Returns true if `leftStats` has been explicitly set.
  public var hasLeftStats: Bool {return _storage._leftStats != nil}
  /// Clears the value of `leftStats`. Subsequent reads from it will return its default value.
  public mutating func clearLeftStats() {_storage._leftStats = nil}

  /// Right stats (not full counts) are kept here.
  public var rightStats: Tensorflow_Tensorforest_LeafStat {
    get {return _storage._rightStats ?? Tensorflow_Tensorforest_LeafStat()}
    set {_uniqueStorage()._rightStats = newValue}
  }
  /// Returns true if `rightStats` has been explicitly set.
  public var hasRightStats: Bool {return _storage._rightStats != nil}
  /// Clears the value of `rightStats`. Subsequent reads from it will return its default value.
  public mutating func clearRightStats() {_storage._rightStats = nil}

  /// Fields used when training with a graph runner.
  public var uniqueID: String {
    get {return _storage._uniqueID}
    set {_uniqueStorage()._uniqueID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._split)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._leftStats)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._rightStats)
        case 6: try decoder.decodeSingularStringField(value: &_storage._uniqueID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._split {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._leftStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._rightStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._uniqueID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uniqueID, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Proto used for tracking tree paths during inference time.
public struct Tensorflow_Tensorforest_TreePath: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TreePath"

  /// Nodes are listed in order that they were traversed. i.e. nodes_visited[0]
  /// is the tree's root node.
  public var nodesVisited: [Tensorflow_DecisionTrees_TreeNode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodesVisited)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodesVisited.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodesVisited, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.tensorforest"

extension Tensorflow_Tensorforest_FertileStats: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_to_slot"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_FertileStats) -> Bool {
    if self.nodeToSlot != other.nodeToSlot {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_GiniStats: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "square"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_GiniStats) -> Bool {
    if self.square != other.square {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_LeafStat: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "weight_sum"),
    1: .same(proto: "classification"),
    2: .same(proto: "regression"),
  ]

  fileprivate class _StorageClass {
    var _weightSum: Float = 0
    var _leafStat: Tensorflow_Tensorforest_LeafStat.OneOf_LeafStat?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _weightSum = source._weightSum
      _leafStat = source._leafStat
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_LeafStat) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._weightSum != other_storage._weightSum {return false}
        if _storage._leafStat != other_storage._leafStat {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dense_counts"),
    2: .standard(proto: "sparse_counts"),
    3: .same(proto: "gini"),
  ]

  fileprivate class _StorageClass {
    var _counts: Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats.OneOf_Counts?
    var _gini: Tensorflow_Tensorforest_GiniStats? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _counts = source._counts
      _gini = source._gini
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_LeafStat.GiniImpurityClassificationStats) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._counts != other_storage._counts {return false}
        if _storage._gini != other_storage._gini {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_LeafStat.LeastSquaresRegressionStats: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mean_output"),
    2: .standard(proto: "mean_output_squares"),
  ]

  fileprivate class _StorageClass {
    var _meanOutput: Tensorflow_DecisionTrees_Vector? = nil
    var _meanOutputSquares: Tensorflow_DecisionTrees_Vector? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _meanOutput = source._meanOutput
      _meanOutputSquares = source._meanOutputSquares
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_LeafStat.LeastSquaresRegressionStats) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._meanOutput != other_storage._meanOutput {return false}
        if _storage._meanOutputSquares != other_storage._meanOutputSquares {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_FertileSlot: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "leaf_stats"),
    1: .same(proto: "candidates"),
    6: .standard(proto: "post_init_leaf_stats"),
    5: .standard(proto: "node_id"),
    7: .same(proto: "depth"),
  ]

  fileprivate class _StorageClass {
    var _leafStats: Tensorflow_Tensorforest_LeafStat? = nil
    var _candidates: [Tensorflow_Tensorforest_SplitCandidate] = []
    var _postInitLeafStats: Tensorflow_Tensorforest_LeafStat? = nil
    var _nodeID: Int32 = 0
    var _depth: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _leafStats = source._leafStats
      _candidates = source._candidates
      _postInitLeafStats = source._postInitLeafStats
      _nodeID = source._nodeID
      _depth = source._depth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_FertileSlot) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._leafStats != other_storage._leafStats {return false}
        if _storage._candidates != other_storage._candidates {return false}
        if _storage._postInitLeafStats != other_storage._postInitLeafStats {return false}
        if _storage._nodeID != other_storage._nodeID {return false}
        if _storage._depth != other_storage._depth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_SplitCandidate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "split"),
    4: .standard(proto: "left_stats"),
    5: .standard(proto: "right_stats"),
    6: .standard(proto: "unique_id"),
  ]

  fileprivate class _StorageClass {
    var _split: Tensorflow_DecisionTrees_BinaryNode? = nil
    var _leftStats: Tensorflow_Tensorforest_LeafStat? = nil
    var _rightStats: Tensorflow_Tensorforest_LeafStat? = nil
    var _uniqueID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _split = source._split
      _leftStats = source._leftStats
      _rightStats = source._rightStats
      _uniqueID = source._uniqueID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_SplitCandidate) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._split != other_storage._split {return false}
        if _storage._leftStats != other_storage._leftStats {return false}
        if _storage._rightStats != other_storage._rightStats {return false}
        if _storage._uniqueID != other_storage._uniqueID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Tensorforest_TreePath: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nodes_visited"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Tensorforest_TreePath) -> Bool {
    if self.nodesVisited != other.nodesVisited {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
