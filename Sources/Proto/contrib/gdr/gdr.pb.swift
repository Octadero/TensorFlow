// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/gdr/gdr.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_RemoteMemoryRegion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var host: String = String()

  public var port: String = String()

  public var addr: UInt64 = 0

  public var rkey: UInt32 = 0

  public var tensorKey: UInt32 = 0

  public var checksum: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow"

extension Tensorflow_RemoteMemoryRegion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoteMemoryRegion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "port"),
    3: .same(proto: "addr"),
    4: .same(proto: "rkey"),
    5: .standard(proto: "tensor_key"),
    6: .same(proto: "checksum"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.host)
      case 2: try decoder.decodeSingularStringField(value: &self.port)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.addr)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.rkey)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.tensorKey)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.checksum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 1)
    }
    if !self.port.isEmpty {
      try visitor.visitSingularStringField(value: self.port, fieldNumber: 2)
    }
    if self.addr != 0 {
      try visitor.visitSingularUInt64Field(value: self.addr, fieldNumber: 3)
    }
    if self.rkey != 0 {
      try visitor.visitSingularUInt32Field(value: self.rkey, fieldNumber: 4)
    }
    if self.tensorKey != 0 {
      try visitor.visitSingularUInt32Field(value: self.tensorKey, fieldNumber: 5)
    }
    if self.checksum != 0 {
      try visitor.visitSingularUInt64Field(value: self.checksum, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_RemoteMemoryRegion) -> Bool {
    if self.host != other.host {return false}
    if self.port != other.port {return false}
    if self.addr != other.addr {return false}
    if self.rkey != other.rkey {return false}
    if self.tensorKey != other.tensorKey {return false}
    if self.checksum != other.checksum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
