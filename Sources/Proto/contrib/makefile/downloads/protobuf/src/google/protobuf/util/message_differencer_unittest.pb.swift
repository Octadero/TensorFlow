// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/makefile/downloads/protobuf/src/google/protobuf/util/message_differencer_unittest.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// This file contains messages for testing repeated field comparison

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ProtobufUnittest_TestField {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var a: Int32 {
    get {return _storage._a ?? 0}
    set {_uniqueStorage()._a = newValue}
  }
  /// Returns true if `a` has been explicitly set.
  public var hasA: Bool {return _storage._a != nil}
  /// Clears the value of `a`. Subsequent reads from it will return its default value.
  public mutating func clearA() {_storage._a = nil}

  public var b: Int32 {
    get {return _storage._b ?? 0}
    set {_uniqueStorage()._b = newValue}
  }
  /// Returns true if `b` has been explicitly set.
  public var hasB: Bool {return _storage._b != nil}
  /// Clears the value of `b`. Subsequent reads from it will return its default value.
  public mutating func clearB() {_storage._b = nil}

  public var c: Int32 {
    get {return _storage._c ?? 0}
    set {_uniqueStorage()._c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  public var hasC: Bool {return _storage._c != nil}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  public mutating func clearC() {_storage._c = nil}

  public var rc: [Int32] {
    get {return _storage._rc}
    set {_uniqueStorage()._rc = newValue}
  }

  public var m: ProtobufUnittest_TestField {
    get {return _storage._m ?? ProtobufUnittest_TestField()}
    set {_uniqueStorage()._m = newValue}
  }
  /// Returns true if `m` has been explicitly set.
  public var hasM: Bool {return _storage._m != nil}
  /// Clears the value of `m`. Subsequent reads from it will return its default value.
  public mutating func clearM() {_storage._m = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtobufUnittest_TestDiffMessage: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [ProtobufUnittest_TestDiffMessage.Item] {
    get {return _storage._item}
    set {_uniqueStorage()._item = newValue}
  }

  public var v: Int32 {
    get {return _storage._v ?? 0}
    set {_uniqueStorage()._v = newValue}
  }
  /// Returns true if `v` has been explicitly set.
  public var hasV: Bool {return _storage._v != nil}
  /// Clears the value of `v`. Subsequent reads from it will return its default value.
  public mutating func clearV() {_storage._v = nil}

  public var w: String {
    get {return _storage._w ?? String()}
    set {_uniqueStorage()._w = newValue}
  }
  /// Returns true if `w` has been explicitly set.
  public var hasW: Bool {return _storage._w != nil}
  /// Clears the value of `w`. Subsequent reads from it will return its default value.
  public mutating func clearW() {_storage._w = nil}

  public var m: ProtobufUnittest_TestField {
    get {return _storage._m ?? ProtobufUnittest_TestField()}
    set {_uniqueStorage()._m = newValue}
  }
  /// Returns true if `m` has been explicitly set.
  public var hasM: Bool {return _storage._m != nil}
  /// Clears the value of `m`. Subsequent reads from it will return its default value.
  public mutating func clearM() {_storage._m = nil}

  /// Test for combinations
  public var rv: [Int32] {
    get {return _storage._rv}
    set {_uniqueStorage()._rv = newValue}
  }

  /// Test for combinations
  public var rw: [String] {
    get {return _storage._rw}
    set {_uniqueStorage()._rw = newValue}
  }

  /// Test for combinations
  public var rm: [ProtobufUnittest_TestField] {
    get {return _storage._rm}
    set {_uniqueStorage()._rm = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Test basic repeated field comparison.
    public var a: Int32 {
      get {return _storage._a ?? 0}
      set {_uniqueStorage()._a = newValue}
    }
    /// Returns true if `a` has been explicitly set.
    public var hasA: Bool {return _storage._a != nil}
    /// Clears the value of `a`. Subsequent reads from it will return its default value.
    public mutating func clearA() {_storage._a = nil}

    /// Test basic repeated field comparison.
    public var b: String {
      get {return _storage._b ?? String()}
      set {_uniqueStorage()._b = newValue}
    }
    /// Returns true if `b` has been explicitly set.
    public var hasB: Bool {return _storage._b != nil}
    /// Clears the value of `b`. Subsequent reads from it will return its default value.
    public mutating func clearB() {_storage._b = nil}

    /// Test SetOfSet Comparison.
    public var ra: [Int32] {
      get {return _storage._ra}
      set {_uniqueStorage()._ra = newValue}
    }

    /// Test TreatAsMap when key is repeated
    public var rb: [String] {
      get {return _storage._rb}
      set {_uniqueStorage()._rb = newValue}
    }

    /// Test TreatAsMap when key is a message
    public var m: ProtobufUnittest_TestField {
      get {return _storage._m ?? ProtobufUnittest_TestField()}
      set {_uniqueStorage()._m = newValue}
    }
    /// Returns true if `m` has been explicitly set.
    public var hasM: Bool {return _storage._m != nil}
    /// Clears the value of `m`. Subsequent reads from it will return its default value.
    public mutating func clearM() {_storage._m = nil}

    /// Test TreatAsMap when key is a repeated
    public var rm: [ProtobufUnittest_TestField] {
      get {return _storage._rm}
      set {_uniqueStorage()._rm = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  public var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Extension support defined in message_differencer_unittest.proto.

extension ProtobufUnittest_TestDiffMessage {

  public var ProtobufUnittest_TestField_tf: ProtobufUnittest_TestField {
    get {return getExtensionValue(ext: ProtobufUnittest_TestField.Extensions.tf) ?? ProtobufUnittest_TestField()}
    set {setExtensionValue(ext: ProtobufUnittest_TestField.Extensions.tf, value: newValue)}
  }
  /// Returns true if extension `ProtobufUnittest_TestField.Extensions.tf`
  /// has been explicitly set.
  public var hasProtobufUnittest_TestField_tf: Bool {
    return hasExtensionValue(ext: ProtobufUnittest_TestField.Extensions.tf)
  }
  /// Clears the value of extension `ProtobufUnittest_TestField.Extensions.tf`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearProtobufUnittest_TestField_tf() {
    clearExtensionValue(ext: ProtobufUnittest_TestField.Extensions.tf)
  }

}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let ProtobufUnittest_MessageDifferencerUnittest_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  ProtobufUnittest_TestField.Extensions.tf
]

extension ProtobufUnittest_TestField {
  enum Extensions {
    static let tf = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<ProtobufUnittest_TestField>, ProtobufUnittest_TestDiffMessage>(
      _protobuf_fieldNumber: 100,
      fieldName: "protobuf_unittest.TestField.tf"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf_unittest"

extension ProtobufUnittest_TestField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestField"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "a"),
    4: .same(proto: "b"),
    1: .same(proto: "c"),
    2: .same(proto: "rc"),
    5: .same(proto: "m"),
  ]

  fileprivate class _StorageClass {
    var _a: Int32? = nil
    var _b: Int32? = nil
    var _c: Int32? = nil
    var _rc: [Int32] = []
    var _m: ProtobufUnittest_TestField? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _b = source._b
      _c = source._c
      _rc = source._rc
      _m = source._m
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._c)
        case 2: try decoder.decodeRepeatedInt32Field(value: &_storage._rc)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._a)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._b)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._m)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._c {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if !_storage._rc.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._rc, fieldNumber: 2)
      }
      if let v = _storage._a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._b {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._m {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestField) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._a != other_storage._a {return false}
        if _storage._b != other_storage._b {return false}
        if _storage._c != other_storage._c {return false}
        if _storage._rc != other_storage._rc {return false}
        if _storage._m != other_storage._m {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProtobufUnittest_TestDiffMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestDiffMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "Item", json: "item"),
    13: .same(proto: "v"),
    14: .same(proto: "w"),
    15: .same(proto: "m"),
    11: .same(proto: "rv"),
    10: .same(proto: "rw"),
    12: .same(proto: "rm"),
  ]

  fileprivate class _StorageClass {
    var _item: [ProtobufUnittest_TestDiffMessage.Item] = []
    var _v: Int32? = nil
    var _w: String? = nil
    var _m: ProtobufUnittest_TestField? = nil
    var _rv: [Int32] = []
    var _rw: [String] = []
    var _rm: [ProtobufUnittest_TestField] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _item = source._item
      _v = source._v
      _w = source._w
      _m = source._m
      _rv = source._rv
      _rw = source._rw
      _rm = source._rm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedGroupField(value: &_storage._item)
        case 10: try decoder.decodeRepeatedStringField(value: &_storage._rw)
        case 11: try decoder.decodeRepeatedInt32Field(value: &_storage._rv)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._rm)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._v)
        case 14: try decoder.decodeSingularStringField(value: &_storage._w)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._m)
        case 100..<200:
          try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: ProtobufUnittest_TestDiffMessage.self, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._item.isEmpty {
        try visitor.visitRepeatedGroupField(value: _storage._item, fieldNumber: 1)
      }
      if !_storage._rw.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._rw, fieldNumber: 10)
      }
      if !_storage._rv.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._rv, fieldNumber: 11)
      }
      if !_storage._rm.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rm, fieldNumber: 12)
      }
      if let v = _storage._v {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._w {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      }
      if let v = _storage._m {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 200)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestDiffMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._item != other_storage._item {return false}
        if _storage._v != other_storage._v {return false}
        if _storage._w != other_storage._w {return false}
        if _storage._m != other_storage._m {return false}
        if _storage._rv != other_storage._rv {return false}
        if _storage._rw != other_storage._rw {return false}
        if _storage._rm != other_storage._rm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    if _protobuf_extensionFieldValues != other._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension ProtobufUnittest_TestDiffMessage.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ProtobufUnittest_TestDiffMessage.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "a"),
    4: .same(proto: "b"),
    3: .same(proto: "ra"),
    5: .same(proto: "rb"),
    6: .same(proto: "m"),
    7: .same(proto: "rm"),
  ]

  fileprivate class _StorageClass {
    var _a: Int32? = nil
    var _b: String? = nil
    var _ra: [Int32] = []
    var _rb: [String] = []
    var _m: ProtobufUnittest_TestField? = nil
    var _rm: [ProtobufUnittest_TestField] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _a = source._a
      _b = source._b
      _ra = source._ra
      _rb = source._rb
      _m = source._m
      _rm = source._rm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._a)
        case 3: try decoder.decodeRepeatedInt32Field(value: &_storage._ra)
        case 4: try decoder.decodeSingularStringField(value: &_storage._b)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._rb)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._m)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._rm)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._a {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if !_storage._ra.isEmpty {
        try visitor.visitRepeatedInt32Field(value: _storage._ra, fieldNumber: 3)
      }
      if let v = _storage._b {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if !_storage._rb.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._rb, fieldNumber: 5)
      }
      if let v = _storage._m {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._rm.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rm, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: ProtobufUnittest_TestDiffMessage.Item) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._a != other_storage._a {return false}
        if _storage._b != other_storage._b {return false}
        if _storage._ra != other_storage._ra {return false}
        if _storage._rb != other_storage._rb {return false}
        if _storage._m != other_storage._m {return false}
        if _storage._rm != other_storage._rm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
