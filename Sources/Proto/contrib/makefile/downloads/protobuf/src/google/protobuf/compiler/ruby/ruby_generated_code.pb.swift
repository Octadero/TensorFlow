// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/makefile/downloads/protobuf/src/google/protobuf/compiler/ruby/ruby_generated_code.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum A_B_C_TestEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `default` // = 0
  case a // = 1
  case b // = 2
  case c // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .a
    case 2: self = .b
    case 3: self = .c
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .a: return 1
    case .b: return 2
    case .c: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct A_B_C_TestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  public var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  public var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  public var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  public var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  public var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  public var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  public var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  public var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  public var optionalEnum: A_B_C_TestEnum {
    get {return _storage._optionalEnum}
    set {_uniqueStorage()._optionalEnum = newValue}
  }

  public var optionalMsg: A_B_C_TestMessage {
    get {return _storage._optionalMsg ?? A_B_C_TestMessage()}
    set {_uniqueStorage()._optionalMsg = newValue}
  }
  /// Returns true if `optionalMsg` has been explicitly set.
  public var hasOptionalMsg: Bool {return _storage._optionalMsg != nil}
  /// Clears the value of `optionalMsg`. Subsequent reads from it will return its default value.
  public mutating func clearOptionalMsg() {_storage._optionalMsg = nil}

  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  public var repeatedEnum: [A_B_C_TestEnum] {
    get {return _storage._repeatedEnum}
    set {_uniqueStorage()._repeatedEnum = newValue}
  }

  public var repeatedMsg: [A_B_C_TestMessage] {
    get {return _storage._repeatedMsg}
    set {_uniqueStorage()._repeatedMsg = newValue}
  }

  public var myOneof: OneOf_MyOneof? {
    get {return _storage._myOneof}
    set {_uniqueStorage()._myOneof = newValue}
  }

  public var oneofInt32: Int32 {
    get {
      if case .oneofInt32(let v)? = _storage._myOneof {return v}
      return 0
    }
    set {_uniqueStorage()._myOneof = .oneofInt32(newValue)}
  }

  public var oneofInt64: Int64 {
    get {
      if case .oneofInt64(let v)? = _storage._myOneof {return v}
      return 0
    }
    set {_uniqueStorage()._myOneof = .oneofInt64(newValue)}
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._myOneof {return v}
      return 0
    }
    set {_uniqueStorage()._myOneof = .oneofUint32(newValue)}
  }

  public var oneofUint64: UInt64 {
    get {
      if case .oneofUint64(let v)? = _storage._myOneof {return v}
      return 0
    }
    set {_uniqueStorage()._myOneof = .oneofUint64(newValue)}
  }

  public var oneofBool: Bool {
    get {
      if case .oneofBool(let v)? = _storage._myOneof {return v}
      return false
    }
    set {_uniqueStorage()._myOneof = .oneofBool(newValue)}
  }

  public var oneofDouble: Double {
    get {
      if case .oneofDouble(let v)? = _storage._myOneof {return v}
      return 0
    }
    set {_uniqueStorage()._myOneof = .oneofDouble(newValue)}
  }

  public var oneofFloat: Float {
    get {
      if case .oneofFloat(let v)? = _storage._myOneof {return v}
      return 0
    }
    set {_uniqueStorage()._myOneof = .oneofFloat(newValue)}
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._myOneof {return v}
      return String()
    }
    set {_uniqueStorage()._myOneof = .oneofString(newValue)}
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._myOneof {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._myOneof = .oneofBytes(newValue)}
  }

  public var oneofEnum: A_B_C_TestEnum {
    get {
      if case .oneofEnum(let v)? = _storage._myOneof {return v}
      return .default
    }
    set {_uniqueStorage()._myOneof = .oneofEnum(newValue)}
  }

  public var oneofMsg: A_B_C_TestMessage {
    get {
      if case .oneofMsg(let v)? = _storage._myOneof {return v}
      return A_B_C_TestMessage()
    }
    set {_uniqueStorage()._myOneof = .oneofMsg(newValue)}
  }

  public var mapInt32String: Dictionary<Int32,String> {
    get {return _storage._mapInt32String}
    set {_uniqueStorage()._mapInt32String = newValue}
  }

  public var mapInt64String: Dictionary<Int64,String> {
    get {return _storage._mapInt64String}
    set {_uniqueStorage()._mapInt64String = newValue}
  }

  public var mapUint32String: Dictionary<UInt32,String> {
    get {return _storage._mapUint32String}
    set {_uniqueStorage()._mapUint32String = newValue}
  }

  public var mapUint64String: Dictionary<UInt64,String> {
    get {return _storage._mapUint64String}
    set {_uniqueStorage()._mapUint64String = newValue}
  }

  public var mapBoolString: Dictionary<Bool,String> {
    get {return _storage._mapBoolString}
    set {_uniqueStorage()._mapBoolString = newValue}
  }

  public var mapStringString: Dictionary<String,String> {
    get {return _storage._mapStringString}
    set {_uniqueStorage()._mapStringString = newValue}
  }

  public var mapStringMsg: Dictionary<String,A_B_C_TestMessage> {
    get {return _storage._mapStringMsg}
    set {_uniqueStorage()._mapStringMsg = newValue}
  }

  public var mapStringEnum: Dictionary<String,A_B_C_TestEnum> {
    get {return _storage._mapStringEnum}
    set {_uniqueStorage()._mapStringEnum = newValue}
  }

  public var mapStringInt32: Dictionary<String,Int32> {
    get {return _storage._mapStringInt32}
    set {_uniqueStorage()._mapStringInt32 = newValue}
  }

  public var mapStringBool: Dictionary<String,Bool> {
    get {return _storage._mapStringBool}
    set {_uniqueStorage()._mapStringBool = newValue}
  }

  public var nestedMessage: A_B_C_TestMessage.NestedMessage {
    get {return _storage._nestedMessage ?? A_B_C_TestMessage.NestedMessage()}
    set {_uniqueStorage()._nestedMessage = newValue}
  }
  /// Returns true if `nestedMessage` has been explicitly set.
  public var hasNestedMessage: Bool {return _storage._nestedMessage != nil}
  /// Clears the value of `nestedMessage`. Subsequent reads from it will return its default value.
  public mutating func clearNestedMessage() {_storage._nestedMessage = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MyOneof: Equatable {
    case oneofInt32(Int32)
    case oneofInt64(Int64)
    case oneofUint32(UInt32)
    case oneofUint64(UInt64)
    case oneofBool(Bool)
    case oneofDouble(Double)
    case oneofFloat(Float)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofEnum(A_B_C_TestEnum)
    case oneofMsg(A_B_C_TestMessage)

    public static func ==(lhs: A_B_C_TestMessage.OneOf_MyOneof, rhs: A_B_C_TestMessage.OneOf_MyOneof) -> Bool {
      switch (lhs, rhs) {
      case (.oneofInt32(let l), .oneofInt32(let r)): return l == r
      case (.oneofInt64(let l), .oneofInt64(let r)): return l == r
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofUint64(let l), .oneofUint64(let r)): return l == r
      case (.oneofBool(let l), .oneofBool(let r)): return l == r
      case (.oneofDouble(let l), .oneofDouble(let r)): return l == r
      case (.oneofFloat(let l), .oneofFloat(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      case (.oneofEnum(let l), .oneofEnum(let r)): return l == r
      case (.oneofMsg(let l), .oneofMsg(let r)): return l == r
      default: return false
      }
    }
  }

  public struct NestedMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var foo: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "A.B.C"

extension A_B_C_TestEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Default"),
    1: .same(proto: "A"),
    2: .same(proto: "B"),
    3: .same(proto: "C"),
  ]
}

extension A_B_C_TestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    4: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_bool"),
    6: .standard(proto: "optional_double"),
    7: .standard(proto: "optional_float"),
    8: .standard(proto: "optional_string"),
    9: .standard(proto: "optional_bytes"),
    10: .standard(proto: "optional_enum"),
    11: .standard(proto: "optional_msg"),
    21: .standard(proto: "repeated_int32"),
    22: .standard(proto: "repeated_int64"),
    23: .standard(proto: "repeated_uint32"),
    24: .standard(proto: "repeated_uint64"),
    25: .standard(proto: "repeated_bool"),
    26: .standard(proto: "repeated_double"),
    27: .standard(proto: "repeated_float"),
    28: .standard(proto: "repeated_string"),
    29: .standard(proto: "repeated_bytes"),
    30: .standard(proto: "repeated_enum"),
    31: .standard(proto: "repeated_msg"),
    41: .standard(proto: "oneof_int32"),
    42: .standard(proto: "oneof_int64"),
    43: .standard(proto: "oneof_uint32"),
    44: .standard(proto: "oneof_uint64"),
    45: .standard(proto: "oneof_bool"),
    46: .standard(proto: "oneof_double"),
    47: .standard(proto: "oneof_float"),
    48: .standard(proto: "oneof_string"),
    49: .standard(proto: "oneof_bytes"),
    50: .standard(proto: "oneof_enum"),
    51: .standard(proto: "oneof_msg"),
    61: .standard(proto: "map_int32_string"),
    62: .standard(proto: "map_int64_string"),
    63: .standard(proto: "map_uint32_string"),
    64: .standard(proto: "map_uint64_string"),
    65: .standard(proto: "map_bool_string"),
    66: .standard(proto: "map_string_string"),
    67: .standard(proto: "map_string_msg"),
    68: .standard(proto: "map_string_enum"),
    69: .standard(proto: "map_string_int32"),
    70: .standard(proto: "map_string_bool"),
    80: .standard(proto: "nested_message"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalBool: Bool = false
    var _optionalDouble: Double = 0
    var _optionalFloat: Float = 0
    var _optionalString: String = String()
    var _optionalBytes: Data = SwiftProtobuf.Internal.emptyData
    var _optionalEnum: A_B_C_TestEnum = .default
    var _optionalMsg: A_B_C_TestMessage? = nil
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedBool: [Bool] = []
    var _repeatedDouble: [Double] = []
    var _repeatedFloat: [Float] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedEnum: [A_B_C_TestEnum] = []
    var _repeatedMsg: [A_B_C_TestMessage] = []
    var _myOneof: A_B_C_TestMessage.OneOf_MyOneof?
    var _mapInt32String: Dictionary<Int32,String> = [:]
    var _mapInt64String: Dictionary<Int64,String> = [:]
    var _mapUint32String: Dictionary<UInt32,String> = [:]
    var _mapUint64String: Dictionary<UInt64,String> = [:]
    var _mapBoolString: Dictionary<Bool,String> = [:]
    var _mapStringString: Dictionary<String,String> = [:]
    var _mapStringMsg: Dictionary<String,A_B_C_TestMessage> = [:]
    var _mapStringEnum: Dictionary<String,A_B_C_TestEnum> = [:]
    var _mapStringInt32: Dictionary<String,Int32> = [:]
    var _mapStringBool: Dictionary<String,Bool> = [:]
    var _nestedMessage: A_B_C_TestMessage.NestedMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalBool = source._optionalBool
      _optionalDouble = source._optionalDouble
      _optionalFloat = source._optionalFloat
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalEnum = source._optionalEnum
      _optionalMsg = source._optionalMsg
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedBool = source._repeatedBool
      _repeatedDouble = source._repeatedDouble
      _repeatedFloat = source._repeatedFloat
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedEnum = source._repeatedEnum
      _repeatedMsg = source._repeatedMsg
      _myOneof = source._myOneof
      _mapInt32String = source._mapInt32String
      _mapInt64String = source._mapInt64String
      _mapUint32String = source._mapUint32String
      _mapUint64String = source._mapUint64String
      _mapBoolString = source._mapBoolString
      _mapStringString = source._mapStringString
      _mapStringMsg = source._mapStringMsg
      _mapStringEnum = source._mapStringEnum
      _mapStringInt32 = source._mapStringInt32
      _mapStringBool = source._mapStringBool
      _nestedMessage = source._nestedMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._optionalBool)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._optionalFloat)
        case 8: try decoder.decodeSingularStringField(value: &_storage._optionalString)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._optionalEnum)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._optionalMsg)
        case 21: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
        case 22: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
        case 23: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
        case 24: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
        case 25: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
        case 26: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
        case 27: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
        case 28: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
        case 29: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
        case 30: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedEnum)
        case 31: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedMsg)
        case 41:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._myOneof = .oneofInt32(v)}
        case 42:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._myOneof = .oneofInt64(v)}
        case 43:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {_storage._myOneof = .oneofUint32(v)}
        case 44:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: UInt64?
          try decoder.decodeSingularUInt64Field(value: &v)
          if let v = v {_storage._myOneof = .oneofUint64(v)}
        case 45:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._myOneof = .oneofBool(v)}
        case 46:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._myOneof = .oneofDouble(v)}
        case 47:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: Float?
          try decoder.decodeSingularFloatField(value: &v)
          if let v = v {_storage._myOneof = .oneofFloat(v)}
        case 48:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._myOneof = .oneofString(v)}
        case 49:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._myOneof = .oneofBytes(v)}
        case 50:
          if _storage._myOneof != nil {try decoder.handleConflictingOneOf()}
          var v: A_B_C_TestEnum?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._myOneof = .oneofEnum(v)}
        case 51:
          var v: A_B_C_TestMessage?
          if let current = _storage._myOneof {
            try decoder.handleConflictingOneOf()
            if case .oneofMsg(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._myOneof = .oneofMsg(v)}
        case 61: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapInt32String)
        case 62: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapInt64String)
        case 63: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapUint32String)
        case 64: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapUint64String)
        case 65: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapBoolString)
        case 66: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapStringString)
        case 67: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,A_B_C_TestMessage>.self, value: &_storage._mapStringMsg)
        case 68: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,A_B_C_TestEnum>.self, value: &_storage._mapStringEnum)
        case 69: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._mapStringInt32)
        case 70: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: &_storage._mapStringBool)
        case 80: try decoder.decodeSingularMessageField(value: &_storage._nestedMessage)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._optionalInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalInt32, fieldNumber: 1)
      }
      if _storage._optionalInt64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._optionalInt64, fieldNumber: 2)
      }
      if _storage._optionalUint32 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._optionalUint32, fieldNumber: 3)
      }
      if _storage._optionalUint64 != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._optionalUint64, fieldNumber: 4)
      }
      if _storage._optionalBool != false {
        try visitor.visitSingularBoolField(value: _storage._optionalBool, fieldNumber: 5)
      }
      if _storage._optionalDouble != 0 {
        try visitor.visitSingularDoubleField(value: _storage._optionalDouble, fieldNumber: 6)
      }
      if _storage._optionalFloat != 0 {
        try visitor.visitSingularFloatField(value: _storage._optionalFloat, fieldNumber: 7)
      }
      if !_storage._optionalString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalString, fieldNumber: 8)
      }
      if !_storage._optionalBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._optionalBytes, fieldNumber: 9)
      }
      if _storage._optionalEnum != .default {
        try visitor.visitSingularEnumField(value: _storage._optionalEnum, fieldNumber: 10)
      }
      if let v = _storage._optionalMsg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._repeatedInt32, fieldNumber: 21)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._repeatedInt64, fieldNumber: 22)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 23)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 24)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._repeatedBool, fieldNumber: 25)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitPackedDoubleField(value: _storage._repeatedDouble, fieldNumber: 26)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._repeatedFloat, fieldNumber: 27)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 28)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 29)
      }
      if !_storage._repeatedEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedEnum, fieldNumber: 30)
      }
      if !_storage._repeatedMsg.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedMsg, fieldNumber: 31)
      }
      switch _storage._myOneof {
      case .oneofInt32(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 41)
      case .oneofInt64(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 42)
      case .oneofUint32(let v)?:
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 43)
      case .oneofUint64(let v)?:
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 44)
      case .oneofBool(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 45)
      case .oneofDouble(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 46)
      case .oneofFloat(let v)?:
        try visitor.visitSingularFloatField(value: v, fieldNumber: 47)
      case .oneofString(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 48)
      case .oneofBytes(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 49)
      case .oneofEnum(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 50)
      case .oneofMsg(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      case nil: break
      }
      if !_storage._mapInt32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapInt32String, fieldNumber: 61)
      }
      if !_storage._mapInt64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapInt64String, fieldNumber: 62)
      }
      if !_storage._mapUint32String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._mapUint32String, fieldNumber: 63)
      }
      if !_storage._mapUint64String.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapUint64String, fieldNumber: 64)
      }
      if !_storage._mapBoolString.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufBool,SwiftProtobuf.ProtobufString>.self, value: _storage._mapBoolString, fieldNumber: 65)
      }
      if !_storage._mapStringString.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._mapStringString, fieldNumber: 66)
      }
      if !_storage._mapStringMsg.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,A_B_C_TestMessage>.self, value: _storage._mapStringMsg, fieldNumber: 67)
      }
      if !_storage._mapStringEnum.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufEnumMap<SwiftProtobuf.ProtobufString,A_B_C_TestEnum>.self, value: _storage._mapStringEnum, fieldNumber: 68)
      }
      if !_storage._mapStringInt32.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: _storage._mapStringInt32, fieldNumber: 69)
      }
      if !_storage._mapStringBool.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: _storage._mapStringBool, fieldNumber: 70)
      }
      if let v = _storage._nestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 80)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: A_B_C_TestMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != other_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != other_storage._optionalUint64 {return false}
        if _storage._optionalBool != other_storage._optionalBool {return false}
        if _storage._optionalDouble != other_storage._optionalDouble {return false}
        if _storage._optionalFloat != other_storage._optionalFloat {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalEnum != other_storage._optionalEnum {return false}
        if _storage._optionalMsg != other_storage._optionalMsg {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedEnum != other_storage._repeatedEnum {return false}
        if _storage._repeatedMsg != other_storage._repeatedMsg {return false}
        if _storage._myOneof != other_storage._myOneof {return false}
        if _storage._mapInt32String != other_storage._mapInt32String {return false}
        if _storage._mapInt64String != other_storage._mapInt64String {return false}
        if _storage._mapUint32String != other_storage._mapUint32String {return false}
        if _storage._mapUint64String != other_storage._mapUint64String {return false}
        if _storage._mapBoolString != other_storage._mapBoolString {return false}
        if _storage._mapStringString != other_storage._mapStringString {return false}
        if _storage._mapStringMsg != other_storage._mapStringMsg {return false}
        if _storage._mapStringEnum != other_storage._mapStringEnum {return false}
        if _storage._mapStringInt32 != other_storage._mapStringInt32 {return false}
        if _storage._mapStringBool != other_storage._mapStringBool {return false}
        if _storage._nestedMessage != other_storage._nestedMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension A_B_C_TestMessage.NestedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = A_B_C_TestMessage.protoMessageName + ".NestedMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "foo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.foo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.foo != 0 {
      try visitor.visitSingularInt32Field(value: self.foo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: A_B_C_TestMessage.NestedMessage) -> Bool {
    if self.foo != other.foo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
