// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/tools/proto_text/test.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Tensorflow_Test_ForeignEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case foreignZero // = 0
  case foreignFoo // = 4
  case foreignBar // = 5
  case foreignBaz // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .foreignZero
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .foreignZero
    case 4: self = .foreignFoo
    case 5: self = .foreignBar
    case 6: self = .foreignBaz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .foreignZero: return 0
    case .foreignFoo: return 4
    case .foreignBar: return 5
    case .foreignBaz: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Tensorflow_Test_TestAllTypes: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TestAllTypes"

  /// Singular
  public var optionalInt32: Int32 {
    get {return _storage._optionalInt32}
    set {_uniqueStorage()._optionalInt32 = newValue}
  }

  public var optionalInt64: Int64 {
    get {return _storage._optionalInt64}
    set {_uniqueStorage()._optionalInt64 = newValue}
  }

  public var optionalUint32: UInt32 {
    get {return _storage._optionalUint32}
    set {_uniqueStorage()._optionalUint32 = newValue}
  }

  /// use large tag to test output order.
  public var optionalUint64: UInt64 {
    get {return _storage._optionalUint64}
    set {_uniqueStorage()._optionalUint64 = newValue}
  }

  public var optionalSint32: Int32 {
    get {return _storage._optionalSint32}
    set {_uniqueStorage()._optionalSint32 = newValue}
  }

  public var optionalSint64: Int64 {
    get {return _storage._optionalSint64}
    set {_uniqueStorage()._optionalSint64 = newValue}
  }

  public var optionalFixed32: UInt32 {
    get {return _storage._optionalFixed32}
    set {_uniqueStorage()._optionalFixed32 = newValue}
  }

  public var optionalFixed64: UInt64 {
    get {return _storage._optionalFixed64}
    set {_uniqueStorage()._optionalFixed64 = newValue}
  }

  public var optionalSfixed32: Int32 {
    get {return _storage._optionalSfixed32}
    set {_uniqueStorage()._optionalSfixed32 = newValue}
  }

  public var optionalSfixed64: Int64 {
    get {return _storage._optionalSfixed64}
    set {_uniqueStorage()._optionalSfixed64 = newValue}
  }

  public var optionalFloat: Float {
    get {return _storage._optionalFloat}
    set {_uniqueStorage()._optionalFloat = newValue}
  }

  public var optionalDouble: Double {
    get {return _storage._optionalDouble}
    set {_uniqueStorage()._optionalDouble = newValue}
  }

  public var optionalBool: Bool {
    get {return _storage._optionalBool}
    set {_uniqueStorage()._optionalBool = newValue}
  }

  public var optionalString: String {
    get {return _storage._optionalString}
    set {_uniqueStorage()._optionalString = newValue}
  }

  public var optionalBytes: Data {
    get {return _storage._optionalBytes}
    set {_uniqueStorage()._optionalBytes = newValue}
  }

  public var optionalNestedMessage: Tensorflow_Test_TestAllTypes.NestedMessage {
    get {return _storage._optionalNestedMessage ?? Tensorflow_Test_TestAllTypes.NestedMessage()}
    set {_uniqueStorage()._optionalNestedMessage = newValue}
  }
  /// Returns true if `optionalNestedMessage` has been explicitly set.
  public var hasOptionalNestedMessage: Bool {return _storage._optionalNestedMessage != nil}
  /// Clears the value of `optionalNestedMessage`. Subsequent reads from it will return its default value.
  public mutating func clearOptionalNestedMessage() {_storage._optionalNestedMessage = nil}

  public var optionalForeignMessage: Tensorflow_Test_ForeignMessage {
    get {return _storage._optionalForeignMessage ?? Tensorflow_Test_ForeignMessage()}
    set {_uniqueStorage()._optionalForeignMessage = newValue}
  }
  /// Returns true if `optionalForeignMessage` has been explicitly set.
  public var hasOptionalForeignMessage: Bool {return _storage._optionalForeignMessage != nil}
  /// Clears the value of `optionalForeignMessage`. Subsequent reads from it will return its default value.
  public mutating func clearOptionalForeignMessage() {_storage._optionalForeignMessage = nil}

  public var optionalNestedEnum: Tensorflow_Test_TestAllTypes.NestedEnum {
    get {return _storage._optionalNestedEnum}
    set {_uniqueStorage()._optionalNestedEnum = newValue}
  }

  public var optionalForeignEnum: Tensorflow_Test_ForeignEnum {
    get {return _storage._optionalForeignEnum}
    set {_uniqueStorage()._optionalForeignEnum = newValue}
  }

  public var optionalCord: String {
    get {return _storage._optionalCord}
    set {_uniqueStorage()._optionalCord = newValue}
  }

  /// Repeated
  public var repeatedInt32: [Int32] {
    get {return _storage._repeatedInt32}
    set {_uniqueStorage()._repeatedInt32 = newValue}
  }

  public var repeatedInt64: [Int64] {
    get {return _storage._repeatedInt64}
    set {_uniqueStorage()._repeatedInt64 = newValue}
  }

  public var repeatedUint32: [UInt32] {
    get {return _storage._repeatedUint32}
    set {_uniqueStorage()._repeatedUint32 = newValue}
  }

  public var repeatedUint64: [UInt64] {
    get {return _storage._repeatedUint64}
    set {_uniqueStorage()._repeatedUint64 = newValue}
  }

  public var repeatedSint32: [Int32] {
    get {return _storage._repeatedSint32}
    set {_uniqueStorage()._repeatedSint32 = newValue}
  }

  public var repeatedSint64: [Int64] {
    get {return _storage._repeatedSint64}
    set {_uniqueStorage()._repeatedSint64 = newValue}
  }

  public var repeatedFixed32: [UInt32] {
    get {return _storage._repeatedFixed32}
    set {_uniqueStorage()._repeatedFixed32 = newValue}
  }

  public var repeatedFixed64: [UInt64] {
    get {return _storage._repeatedFixed64}
    set {_uniqueStorage()._repeatedFixed64 = newValue}
  }

  public var repeatedSfixed32: [Int32] {
    get {return _storage._repeatedSfixed32}
    set {_uniqueStorage()._repeatedSfixed32 = newValue}
  }

  public var repeatedSfixed64: [Int64] {
    get {return _storage._repeatedSfixed64}
    set {_uniqueStorage()._repeatedSfixed64 = newValue}
  }

  public var repeatedFloat: [Float] {
    get {return _storage._repeatedFloat}
    set {_uniqueStorage()._repeatedFloat = newValue}
  }

  public var repeatedDouble: [Double] {
    get {return _storage._repeatedDouble}
    set {_uniqueStorage()._repeatedDouble = newValue}
  }

  public var repeatedBool: [Bool] {
    get {return _storage._repeatedBool}
    set {_uniqueStorage()._repeatedBool = newValue}
  }

  public var repeatedString: [String] {
    get {return _storage._repeatedString}
    set {_uniqueStorage()._repeatedString = newValue}
  }

  public var repeatedBytes: [Data] {
    get {return _storage._repeatedBytes}
    set {_uniqueStorage()._repeatedBytes = newValue}
  }

  public var repeatedNestedMessage: [Tensorflow_Test_TestAllTypes.NestedMessage] {
    get {return _storage._repeatedNestedMessage}
    set {_uniqueStorage()._repeatedNestedMessage = newValue}
  }

  public var repeatedNestedEnum: [Tensorflow_Test_TestAllTypes.NestedEnum] {
    get {return _storage._repeatedNestedEnum}
    set {_uniqueStorage()._repeatedNestedEnum = newValue}
  }

  public var repeatedCord: [String] {
    get {return _storage._repeatedCord}
    set {_uniqueStorage()._repeatedCord = newValue}
  }

  public var oneofField: OneOf_OneofField? {
    get {return _storage._oneofField}
    set {_uniqueStorage()._oneofField = newValue}
  }

  public var oneofUint32: UInt32 {
    get {
      if case .oneofUint32(let v)? = _storage._oneofField {return v}
      return 0
    }
    set {_uniqueStorage()._oneofField = .oneofUint32(newValue)}
  }

  public var oneofNestedMessage: Tensorflow_Test_TestAllTypes.NestedMessage {
    get {
      if case .oneofNestedMessage(let v)? = _storage._oneofField {return v}
      return Tensorflow_Test_TestAllTypes.NestedMessage()
    }
    set {_uniqueStorage()._oneofField = .oneofNestedMessage(newValue)}
  }

  public var oneofString: String {
    get {
      if case .oneofString(let v)? = _storage._oneofField {return v}
      return String()
    }
    set {_uniqueStorage()._oneofField = .oneofString(newValue)}
  }

  public var oneofBytes: Data {
    get {
      if case .oneofBytes(let v)? = _storage._oneofField {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._oneofField = .oneofBytes(newValue)}
  }

  public var oneofEnum: Tensorflow_Test_TestAllTypes.NestedEnum {
    get {
      if case .oneofEnum(let v)? = _storage._oneofField {return v}
      return .zero
    }
    set {_uniqueStorage()._oneofField = .oneofEnum(newValue)}
  }

  public var mapStringToMessage: Dictionary<String,Tensorflow_Test_TestAllTypes.NestedMessage> {
    get {return _storage._mapStringToMessage}
    set {_uniqueStorage()._mapStringToMessage = newValue}
  }

  public var mapInt32ToMessage: Dictionary<Int32,Tensorflow_Test_TestAllTypes.NestedMessage> {
    get {return _storage._mapInt32ToMessage}
    set {_uniqueStorage()._mapInt32ToMessage = newValue}
  }

  public var mapInt64ToMessage: Dictionary<Int64,Tensorflow_Test_TestAllTypes.NestedMessage> {
    get {return _storage._mapInt64ToMessage}
    set {_uniqueStorage()._mapInt64ToMessage = newValue}
  }

  public var mapBoolToMessage: Dictionary<Bool,Tensorflow_Test_TestAllTypes.NestedMessage> {
    get {return _storage._mapBoolToMessage}
    set {_uniqueStorage()._mapBoolToMessage = newValue}
  }

  public var mapStringToInt64: Dictionary<String,Int64> {
    get {return _storage._mapStringToInt64}
    set {_uniqueStorage()._mapStringToInt64 = newValue}
  }

  public var mapInt64ToString: Dictionary<Int64,String> {
    get {return _storage._mapInt64ToString}
    set {_uniqueStorage()._mapInt64ToString = newValue}
  }

  public var anotherMapStringToMessage: Dictionary<String,Tensorflow_Test_TestAllTypes.NestedMessage> {
    get {return _storage._anotherMapStringToMessage}
    set {_uniqueStorage()._anotherMapStringToMessage = newValue}
  }

  public var packedRepeatedInt64: [Int64] {
    get {return _storage._packedRepeatedInt64}
    set {_uniqueStorage()._packedRepeatedInt64 = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_OneofField: Equatable {
    case oneofUint32(UInt32)
    case oneofNestedMessage(Tensorflow_Test_TestAllTypes.NestedMessage)
    case oneofString(String)
    case oneofBytes(Data)
    case oneofEnum(Tensorflow_Test_TestAllTypes.NestedEnum)

    public static func ==(lhs: Tensorflow_Test_TestAllTypes.OneOf_OneofField, rhs: Tensorflow_Test_TestAllTypes.OneOf_OneofField) -> Bool {
      switch (lhs, rhs) {
      case (.oneofUint32(let l), .oneofUint32(let r)): return l == r
      case (.oneofNestedMessage(let l), .oneofNestedMessage(let r)): return l == r
      case (.oneofString(let l), .oneofString(let r)): return l == r
      case (.oneofBytes(let l), .oneofBytes(let r)): return l == r
      case (.oneofEnum(let l), .oneofEnum(let r)): return l == r
      default: return false
      }
    }
  }

  public enum NestedEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case zero // = 0
    case foo // = 1
    case bar // = 2
    case baz // = 3

    /// Intentionally negative.
    case neg // = -1
    case UNRECOGNIZED(Int)

    public init() {
      self = .zero
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .neg
      case 0: self = .zero
      case 1: self = .foo
      case 2: self = .bar
      case 3: self = .baz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .neg: return -1
      case .zero: return 0
      case .foo: return 1
      case .bar: return 2
      case .baz: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct NestedMessage: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Test_TestAllTypes.protoMessageName + ".NestedMessage"

    public var optionalInt32: Int32 {
      get {return _storage._optionalInt32}
      set {_uniqueStorage()._optionalInt32 = newValue}
    }

    public var repeatedInt32: [Int32] {
      get {return _storage._repeatedInt32}
      set {_uniqueStorage()._repeatedInt32 = newValue}
    }

    public var msg: Tensorflow_Test_TestAllTypes.NestedMessage.DoubleNestedMessage {
      get {return _storage._msg ?? Tensorflow_Test_TestAllTypes.NestedMessage.DoubleNestedMessage()}
      set {_uniqueStorage()._msg = newValue}
    }
    /// Returns true if `msg` has been explicitly set.
    public var hasMsg: Bool {return _storage._msg != nil}
    /// Clears the value of `msg`. Subsequent reads from it will return its default value.
    public mutating func clearMsg() {_storage._msg = nil}

    public var optionalInt64: Int64 {
      get {return _storage._optionalInt64}
      set {_uniqueStorage()._optionalInt64 = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct DoubleNestedMessage: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Test_TestAllTypes.NestedMessage.protoMessageName + ".DoubleNestedMessage"

      public var optionalString: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &self.optionalString)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.optionalString.isEmpty {
          try visitor.visitSingularStringField(value: self.optionalString, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
          case 2: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._msg)
          case 4: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._optionalInt32 != 0 {
          try visitor.visitSingularInt32Field(value: _storage._optionalInt32, fieldNumber: 1)
        }
        if !_storage._repeatedInt32.isEmpty {
          try visitor.visitPackedInt32Field(value: _storage._repeatedInt32, fieldNumber: 2)
        }
        if let v = _storage._msg {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        if _storage._optionalInt64 != 0 {
          try visitor.visitSingularInt64Field(value: _storage._optionalInt64, fieldNumber: 4)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._optionalInt64)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._optionalUint32)
        case 5: try decoder.decodeSingularSInt32Field(value: &_storage._optionalSint32)
        case 6: try decoder.decodeSingularSInt64Field(value: &_storage._optionalSint64)
        case 7: try decoder.decodeSingularFixed32Field(value: &_storage._optionalFixed32)
        case 8: try decoder.decodeSingularFixed64Field(value: &_storage._optionalFixed64)
        case 9: try decoder.decodeSingularSFixed32Field(value: &_storage._optionalSfixed32)
        case 10: try decoder.decodeSingularSFixed64Field(value: &_storage._optionalSfixed64)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._optionalFloat)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._optionalDouble)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._optionalBool)
        case 14: try decoder.decodeSingularStringField(value: &_storage._optionalString)
        case 15: try decoder.decodeSingularBytesField(value: &_storage._optionalBytes)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._optionalNestedMessage)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._optionalForeignMessage)
        case 21: try decoder.decodeSingularEnumField(value: &_storage._optionalNestedEnum)
        case 22: try decoder.decodeSingularEnumField(value: &_storage._optionalForeignEnum)
        case 25: try decoder.decodeSingularStringField(value: &_storage._optionalCord)
        case 31: try decoder.decodeRepeatedInt32Field(value: &_storage._repeatedInt32)
        case 32: try decoder.decodeRepeatedInt64Field(value: &_storage._repeatedInt64)
        case 33: try decoder.decodeRepeatedUInt32Field(value: &_storage._repeatedUint32)
        case 34: try decoder.decodeRepeatedUInt64Field(value: &_storage._repeatedUint64)
        case 35: try decoder.decodeRepeatedSInt32Field(value: &_storage._repeatedSint32)
        case 36: try decoder.decodeRepeatedSInt64Field(value: &_storage._repeatedSint64)
        case 37: try decoder.decodeRepeatedFixed32Field(value: &_storage._repeatedFixed32)
        case 38: try decoder.decodeRepeatedFixed64Field(value: &_storage._repeatedFixed64)
        case 39: try decoder.decodeRepeatedSFixed32Field(value: &_storage._repeatedSfixed32)
        case 40: try decoder.decodeRepeatedSFixed64Field(value: &_storage._repeatedSfixed64)
        case 41: try decoder.decodeRepeatedFloatField(value: &_storage._repeatedFloat)
        case 42: try decoder.decodeRepeatedDoubleField(value: &_storage._repeatedDouble)
        case 43: try decoder.decodeRepeatedBoolField(value: &_storage._repeatedBool)
        case 44: try decoder.decodeRepeatedStringField(value: &_storage._repeatedString)
        case 45: try decoder.decodeRepeatedBytesField(value: &_storage._repeatedBytes)
        case 48: try decoder.decodeRepeatedMessageField(value: &_storage._repeatedNestedMessage)
        case 51: try decoder.decodeRepeatedEnumField(value: &_storage._repeatedNestedEnum)
        case 55: try decoder.decodeRepeatedStringField(value: &_storage._repeatedCord)
        case 58: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: &_storage._mapStringToMessage)
        case 59: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: &_storage._mapInt32ToMessage)
        case 60: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: &_storage._mapInt64ToMessage)
        case 61: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufBool,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: &_storage._mapBoolToMessage)
        case 62: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapStringToInt64)
        case 63: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._mapInt64ToString)
        case 64: try decoder.decodeRepeatedInt64Field(value: &_storage._packedRepeatedInt64)
        case 65: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: &_storage._anotherMapStringToMessage)
        case 100:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: Tensorflow_Test_TestAllTypes.NestedEnum?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._oneofField = .oneofEnum(v)}
        case 111:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {_storage._oneofField = .oneofUint32(v)}
        case 112:
          var v: Tensorflow_Test_TestAllTypes.NestedMessage?
          if let current = _storage._oneofField {
            try decoder.handleConflictingOneOf()
            if case .oneofNestedMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneofField = .oneofNestedMessage(v)}
        case 113:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._oneofField = .oneofString(v)}
        case 114:
          if _storage._oneofField != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._oneofField = .oneofBytes(v)}
        case 999: try decoder.decodeSingularUInt64Field(value: &_storage._optionalUint64)
        case 1000: try decoder.decodeSingularInt32Field(value: &_storage._optionalInt32)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._optionalInt64 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._optionalInt64, fieldNumber: 2)
      }
      if _storage._optionalUint32 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._optionalUint32, fieldNumber: 3)
      }
      if _storage._optionalSint32 != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._optionalSint32, fieldNumber: 5)
      }
      if _storage._optionalSint64 != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._optionalSint64, fieldNumber: 6)
      }
      if _storage._optionalFixed32 != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._optionalFixed32, fieldNumber: 7)
      }
      if _storage._optionalFixed64 != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._optionalFixed64, fieldNumber: 8)
      }
      if _storage._optionalSfixed32 != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._optionalSfixed32, fieldNumber: 9)
      }
      if _storage._optionalSfixed64 != 0 {
        try visitor.visitSingularSFixed64Field(value: _storage._optionalSfixed64, fieldNumber: 10)
      }
      if _storage._optionalFloat != 0 {
        try visitor.visitSingularFloatField(value: _storage._optionalFloat, fieldNumber: 11)
      }
      if _storage._optionalDouble != 0 {
        try visitor.visitSingularDoubleField(value: _storage._optionalDouble, fieldNumber: 12)
      }
      if _storage._optionalBool != false {
        try visitor.visitSingularBoolField(value: _storage._optionalBool, fieldNumber: 13)
      }
      if !_storage._optionalString.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalString, fieldNumber: 14)
      }
      if !_storage._optionalBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._optionalBytes, fieldNumber: 15)
      }
      if let v = _storage._optionalNestedMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._optionalForeignMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if _storage._optionalNestedEnum != .zero {
        try visitor.visitSingularEnumField(value: _storage._optionalNestedEnum, fieldNumber: 21)
      }
      if _storage._optionalForeignEnum != .foreignZero {
        try visitor.visitSingularEnumField(value: _storage._optionalForeignEnum, fieldNumber: 22)
      }
      if !_storage._optionalCord.isEmpty {
        try visitor.visitSingularStringField(value: _storage._optionalCord, fieldNumber: 25)
      }
      if !_storage._repeatedInt32.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._repeatedInt32, fieldNumber: 31)
      }
      if !_storage._repeatedInt64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._repeatedInt64, fieldNumber: 32)
      }
      if !_storage._repeatedUint32.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._repeatedUint32, fieldNumber: 33)
      }
      if !_storage._repeatedUint64.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._repeatedUint64, fieldNumber: 34)
      }
      if !_storage._repeatedSint32.isEmpty {
        try visitor.visitPackedSInt32Field(value: _storage._repeatedSint32, fieldNumber: 35)
      }
      if !_storage._repeatedSint64.isEmpty {
        try visitor.visitPackedSInt64Field(value: _storage._repeatedSint64, fieldNumber: 36)
      }
      if !_storage._repeatedFixed32.isEmpty {
        try visitor.visitPackedFixed32Field(value: _storage._repeatedFixed32, fieldNumber: 37)
      }
      if !_storage._repeatedFixed64.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._repeatedFixed64, fieldNumber: 38)
      }
      if !_storage._repeatedSfixed32.isEmpty {
        try visitor.visitPackedSFixed32Field(value: _storage._repeatedSfixed32, fieldNumber: 39)
      }
      if !_storage._repeatedSfixed64.isEmpty {
        try visitor.visitPackedSFixed64Field(value: _storage._repeatedSfixed64, fieldNumber: 40)
      }
      if !_storage._repeatedFloat.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._repeatedFloat, fieldNumber: 41)
      }
      if !_storage._repeatedDouble.isEmpty {
        try visitor.visitPackedDoubleField(value: _storage._repeatedDouble, fieldNumber: 42)
      }
      if !_storage._repeatedBool.isEmpty {
        try visitor.visitPackedBoolField(value: _storage._repeatedBool, fieldNumber: 43)
      }
      if !_storage._repeatedString.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedString, fieldNumber: 44)
      }
      if !_storage._repeatedBytes.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._repeatedBytes, fieldNumber: 45)
      }
      if !_storage._repeatedNestedMessage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._repeatedNestedMessage, fieldNumber: 48)
      }
      if !_storage._repeatedNestedEnum.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._repeatedNestedEnum, fieldNumber: 51)
      }
      if !_storage._repeatedCord.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatedCord, fieldNumber: 55)
      }
      if !_storage._mapStringToMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: _storage._mapStringToMessage, fieldNumber: 58)
      }
      if !_storage._mapInt32ToMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: _storage._mapInt32ToMessage, fieldNumber: 59)
      }
      if !_storage._mapInt64ToMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt64,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: _storage._mapInt64ToMessage, fieldNumber: 60)
      }
      if !_storage._mapBoolToMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufBool,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: _storage._mapBoolToMessage, fieldNumber: 61)
      }
      if !_storage._mapStringToInt64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapStringToInt64, fieldNumber: 62)
      }
      if !_storage._mapInt64ToString.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._mapInt64ToString, fieldNumber: 63)
      }
      if !_storage._packedRepeatedInt64.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._packedRepeatedInt64, fieldNumber: 64)
      }
      if !_storage._anotherMapStringToMessage.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Tensorflow_Test_TestAllTypes.NestedMessage>.self, value: _storage._anotherMapStringToMessage, fieldNumber: 65)
      }
      switch _storage._oneofField {
      case .oneofEnum(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 100)
      case .oneofUint32(let v)?:
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 111)
      case .oneofNestedMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      case .oneofString(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 113)
      case .oneofBytes(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 114)
      case nil: break
      }
      if _storage._optionalUint64 != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._optionalUint64, fieldNumber: 999)
      }
      if _storage._optionalInt32 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._optionalInt32, fieldNumber: 1000)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A recursive message.
public struct Tensorflow_Test_NestedTestAllTypes: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NestedTestAllTypes"

  public var child: Tensorflow_Test_NestedTestAllTypes {
    get {return _storage._child ?? Tensorflow_Test_NestedTestAllTypes()}
    set {_uniqueStorage()._child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return _storage._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {_storage._child = nil}

  public var payload: Tensorflow_Test_TestAllTypes {
    get {return _storage._payload ?? Tensorflow_Test_TestAllTypes()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {_storage._payload = nil}

  public var mapStringToInt64: Dictionary<String,Int64> {
    get {return _storage._mapStringToInt64}
    set {_uniqueStorage()._mapStringToInt64 = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._child)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._payload)
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._mapStringToInt64)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._child {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._mapStringToInt64.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: _storage._mapStringToInt64, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tensorflow_Test_ForeignMessage: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ForeignMessage"

  public var c: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.c)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.c != 0 {
      try visitor.visitSingularInt32Field(value: self.c, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Tensorflow_Test_TestEmptyMessage: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TestEmptyMessage"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.test"

extension Tensorflow_Test_ForeignEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FOREIGN_ZERO"),
    4: .same(proto: "FOREIGN_FOO"),
    5: .same(proto: "FOREIGN_BAR"),
    6: .same(proto: "FOREIGN_BAZ"),
  ]
}

extension Tensorflow_Test_TestAllTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1000: .standard(proto: "optional_int32"),
    2: .standard(proto: "optional_int64"),
    3: .standard(proto: "optional_uint32"),
    999: .standard(proto: "optional_uint64"),
    5: .standard(proto: "optional_sint32"),
    6: .standard(proto: "optional_sint64"),
    7: .standard(proto: "optional_fixed32"),
    8: .standard(proto: "optional_fixed64"),
    9: .standard(proto: "optional_sfixed32"),
    10: .standard(proto: "optional_sfixed64"),
    11: .standard(proto: "optional_float"),
    12: .standard(proto: "optional_double"),
    13: .standard(proto: "optional_bool"),
    14: .standard(proto: "optional_string"),
    15: .standard(proto: "optional_bytes"),
    18: .standard(proto: "optional_nested_message"),
    19: .standard(proto: "optional_foreign_message"),
    21: .standard(proto: "optional_nested_enum"),
    22: .standard(proto: "optional_foreign_enum"),
    25: .standard(proto: "optional_cord"),
    31: .standard(proto: "repeated_int32"),
    32: .standard(proto: "repeated_int64"),
    33: .standard(proto: "repeated_uint32"),
    34: .standard(proto: "repeated_uint64"),
    35: .standard(proto: "repeated_sint32"),
    36: .standard(proto: "repeated_sint64"),
    37: .standard(proto: "repeated_fixed32"),
    38: .standard(proto: "repeated_fixed64"),
    39: .standard(proto: "repeated_sfixed32"),
    40: .standard(proto: "repeated_sfixed64"),
    41: .standard(proto: "repeated_float"),
    42: .standard(proto: "repeated_double"),
    43: .standard(proto: "repeated_bool"),
    44: .standard(proto: "repeated_string"),
    45: .standard(proto: "repeated_bytes"),
    48: .standard(proto: "repeated_nested_message"),
    51: .standard(proto: "repeated_nested_enum"),
    55: .standard(proto: "repeated_cord"),
    111: .standard(proto: "oneof_uint32"),
    112: .standard(proto: "oneof_nested_message"),
    113: .standard(proto: "oneof_string"),
    114: .standard(proto: "oneof_bytes"),
    100: .standard(proto: "oneof_enum"),
    58: .standard(proto: "map_string_to_message"),
    59: .standard(proto: "map_int32_to_message"),
    60: .standard(proto: "map_int64_to_message"),
    61: .standard(proto: "map_bool_to_message"),
    62: .standard(proto: "map_string_to_int64"),
    63: .standard(proto: "map_int64_to_string"),
    65: .standard(proto: "another_map_string_to_message"),
    64: .standard(proto: "packed_repeated_int64"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32 = 0
    var _optionalInt64: Int64 = 0
    var _optionalUint32: UInt32 = 0
    var _optionalUint64: UInt64 = 0
    var _optionalSint32: Int32 = 0
    var _optionalSint64: Int64 = 0
    var _optionalFixed32: UInt32 = 0
    var _optionalFixed64: UInt64 = 0
    var _optionalSfixed32: Int32 = 0
    var _optionalSfixed64: Int64 = 0
    var _optionalFloat: Float = 0
    var _optionalDouble: Double = 0
    var _optionalBool: Bool = false
    var _optionalString: String = String()
    var _optionalBytes: Data = SwiftProtobuf.Internal.emptyData
    var _optionalNestedMessage: Tensorflow_Test_TestAllTypes.NestedMessage? = nil
    var _optionalForeignMessage: Tensorflow_Test_ForeignMessage? = nil
    var _optionalNestedEnum: Tensorflow_Test_TestAllTypes.NestedEnum = .zero
    var _optionalForeignEnum: Tensorflow_Test_ForeignEnum = .foreignZero
    var _optionalCord: String = String()
    var _repeatedInt32: [Int32] = []
    var _repeatedInt64: [Int64] = []
    var _repeatedUint32: [UInt32] = []
    var _repeatedUint64: [UInt64] = []
    var _repeatedSint32: [Int32] = []
    var _repeatedSint64: [Int64] = []
    var _repeatedFixed32: [UInt32] = []
    var _repeatedFixed64: [UInt64] = []
    var _repeatedSfixed32: [Int32] = []
    var _repeatedSfixed64: [Int64] = []
    var _repeatedFloat: [Float] = []
    var _repeatedDouble: [Double] = []
    var _repeatedBool: [Bool] = []
    var _repeatedString: [String] = []
    var _repeatedBytes: [Data] = []
    var _repeatedNestedMessage: [Tensorflow_Test_TestAllTypes.NestedMessage] = []
    var _repeatedNestedEnum: [Tensorflow_Test_TestAllTypes.NestedEnum] = []
    var _repeatedCord: [String] = []
    var _oneofField: Tensorflow_Test_TestAllTypes.OneOf_OneofField?
    var _mapStringToMessage: Dictionary<String,Tensorflow_Test_TestAllTypes.NestedMessage> = [:]
    var _mapInt32ToMessage: Dictionary<Int32,Tensorflow_Test_TestAllTypes.NestedMessage> = [:]
    var _mapInt64ToMessage: Dictionary<Int64,Tensorflow_Test_TestAllTypes.NestedMessage> = [:]
    var _mapBoolToMessage: Dictionary<Bool,Tensorflow_Test_TestAllTypes.NestedMessage> = [:]
    var _mapStringToInt64: Dictionary<String,Int64> = [:]
    var _mapInt64ToString: Dictionary<Int64,String> = [:]
    var _anotherMapStringToMessage: Dictionary<String,Tensorflow_Test_TestAllTypes.NestedMessage> = [:]
    var _packedRepeatedInt64: [Int64] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _optionalInt64 = source._optionalInt64
      _optionalUint32 = source._optionalUint32
      _optionalUint64 = source._optionalUint64
      _optionalSint32 = source._optionalSint32
      _optionalSint64 = source._optionalSint64
      _optionalFixed32 = source._optionalFixed32
      _optionalFixed64 = source._optionalFixed64
      _optionalSfixed32 = source._optionalSfixed32
      _optionalSfixed64 = source._optionalSfixed64
      _optionalFloat = source._optionalFloat
      _optionalDouble = source._optionalDouble
      _optionalBool = source._optionalBool
      _optionalString = source._optionalString
      _optionalBytes = source._optionalBytes
      _optionalNestedMessage = source._optionalNestedMessage
      _optionalForeignMessage = source._optionalForeignMessage
      _optionalNestedEnum = source._optionalNestedEnum
      _optionalForeignEnum = source._optionalForeignEnum
      _optionalCord = source._optionalCord
      _repeatedInt32 = source._repeatedInt32
      _repeatedInt64 = source._repeatedInt64
      _repeatedUint32 = source._repeatedUint32
      _repeatedUint64 = source._repeatedUint64
      _repeatedSint32 = source._repeatedSint32
      _repeatedSint64 = source._repeatedSint64
      _repeatedFixed32 = source._repeatedFixed32
      _repeatedFixed64 = source._repeatedFixed64
      _repeatedSfixed32 = source._repeatedSfixed32
      _repeatedSfixed64 = source._repeatedSfixed64
      _repeatedFloat = source._repeatedFloat
      _repeatedDouble = source._repeatedDouble
      _repeatedBool = source._repeatedBool
      _repeatedString = source._repeatedString
      _repeatedBytes = source._repeatedBytes
      _repeatedNestedMessage = source._repeatedNestedMessage
      _repeatedNestedEnum = source._repeatedNestedEnum
      _repeatedCord = source._repeatedCord
      _oneofField = source._oneofField
      _mapStringToMessage = source._mapStringToMessage
      _mapInt32ToMessage = source._mapInt32ToMessage
      _mapInt64ToMessage = source._mapInt64ToMessage
      _mapBoolToMessage = source._mapBoolToMessage
      _mapStringToInt64 = source._mapStringToInt64
      _mapInt64ToString = source._mapInt64ToString
      _anotherMapStringToMessage = source._anotherMapStringToMessage
      _packedRepeatedInt64 = source._packedRepeatedInt64
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Test_TestAllTypes) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        if _storage._optionalUint32 != other_storage._optionalUint32 {return false}
        if _storage._optionalUint64 != other_storage._optionalUint64 {return false}
        if _storage._optionalSint32 != other_storage._optionalSint32 {return false}
        if _storage._optionalSint64 != other_storage._optionalSint64 {return false}
        if _storage._optionalFixed32 != other_storage._optionalFixed32 {return false}
        if _storage._optionalFixed64 != other_storage._optionalFixed64 {return false}
        if _storage._optionalSfixed32 != other_storage._optionalSfixed32 {return false}
        if _storage._optionalSfixed64 != other_storage._optionalSfixed64 {return false}
        if _storage._optionalFloat != other_storage._optionalFloat {return false}
        if _storage._optionalDouble != other_storage._optionalDouble {return false}
        if _storage._optionalBool != other_storage._optionalBool {return false}
        if _storage._optionalString != other_storage._optionalString {return false}
        if _storage._optionalBytes != other_storage._optionalBytes {return false}
        if _storage._optionalNestedMessage != other_storage._optionalNestedMessage {return false}
        if _storage._optionalForeignMessage != other_storage._optionalForeignMessage {return false}
        if _storage._optionalNestedEnum != other_storage._optionalNestedEnum {return false}
        if _storage._optionalForeignEnum != other_storage._optionalForeignEnum {return false}
        if _storage._optionalCord != other_storage._optionalCord {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._repeatedInt64 != other_storage._repeatedInt64 {return false}
        if _storage._repeatedUint32 != other_storage._repeatedUint32 {return false}
        if _storage._repeatedUint64 != other_storage._repeatedUint64 {return false}
        if _storage._repeatedSint32 != other_storage._repeatedSint32 {return false}
        if _storage._repeatedSint64 != other_storage._repeatedSint64 {return false}
        if _storage._repeatedFixed32 != other_storage._repeatedFixed32 {return false}
        if _storage._repeatedFixed64 != other_storage._repeatedFixed64 {return false}
        if _storage._repeatedSfixed32 != other_storage._repeatedSfixed32 {return false}
        if _storage._repeatedSfixed64 != other_storage._repeatedSfixed64 {return false}
        if _storage._repeatedFloat != other_storage._repeatedFloat {return false}
        if _storage._repeatedDouble != other_storage._repeatedDouble {return false}
        if _storage._repeatedBool != other_storage._repeatedBool {return false}
        if _storage._repeatedString != other_storage._repeatedString {return false}
        if _storage._repeatedBytes != other_storage._repeatedBytes {return false}
        if _storage._repeatedNestedMessage != other_storage._repeatedNestedMessage {return false}
        if _storage._repeatedNestedEnum != other_storage._repeatedNestedEnum {return false}
        if _storage._repeatedCord != other_storage._repeatedCord {return false}
        if _storage._oneofField != other_storage._oneofField {return false}
        if _storage._mapStringToMessage != other_storage._mapStringToMessage {return false}
        if _storage._mapInt32ToMessage != other_storage._mapInt32ToMessage {return false}
        if _storage._mapInt64ToMessage != other_storage._mapInt64ToMessage {return false}
        if _storage._mapBoolToMessage != other_storage._mapBoolToMessage {return false}
        if _storage._mapStringToInt64 != other_storage._mapStringToInt64 {return false}
        if _storage._mapInt64ToString != other_storage._mapInt64ToString {return false}
        if _storage._anotherMapStringToMessage != other_storage._anotherMapStringToMessage {return false}
        if _storage._packedRepeatedInt64 != other_storage._packedRepeatedInt64 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Test_TestAllTypes.NestedEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "NEG"),
    0: .same(proto: "ZERO"),
    1: .same(proto: "FOO"),
    2: .same(proto: "BAR"),
    3: .same(proto: "BAZ"),
  ]
}

extension Tensorflow_Test_TestAllTypes.NestedMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_int32"),
    2: .standard(proto: "repeated_int32"),
    3: .same(proto: "msg"),
    4: .standard(proto: "optional_int64"),
  ]

  fileprivate class _StorageClass {
    var _optionalInt32: Int32 = 0
    var _repeatedInt32: [Int32] = []
    var _msg: Tensorflow_Test_TestAllTypes.NestedMessage.DoubleNestedMessage? = nil
    var _optionalInt64: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _optionalInt32 = source._optionalInt32
      _repeatedInt32 = source._repeatedInt32
      _msg = source._msg
      _optionalInt64 = source._optionalInt64
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Test_TestAllTypes.NestedMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._optionalInt32 != other_storage._optionalInt32 {return false}
        if _storage._repeatedInt32 != other_storage._repeatedInt32 {return false}
        if _storage._msg != other_storage._msg {return false}
        if _storage._optionalInt64 != other_storage._optionalInt64 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Test_TestAllTypes.NestedMessage.DoubleNestedMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "optional_string"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Test_TestAllTypes.NestedMessage.DoubleNestedMessage) -> Bool {
    if self.optionalString != other.optionalString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Test_NestedTestAllTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "child"),
    2: .same(proto: "payload"),
    3: .standard(proto: "map_string_to_int64"),
  ]

  fileprivate class _StorageClass {
    var _child: Tensorflow_Test_NestedTestAllTypes? = nil
    var _payload: Tensorflow_Test_TestAllTypes? = nil
    var _mapStringToInt64: Dictionary<String,Int64> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _child = source._child
      _payload = source._payload
      _mapStringToInt64 = source._mapStringToInt64
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Test_NestedTestAllTypes) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._child != other_storage._child {return false}
        if _storage._payload != other_storage._payload {return false}
        if _storage._mapStringToInt64 != other_storage._mapStringToInt64 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Test_ForeignMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Test_ForeignMessage) -> Bool {
    if self.c != other.c {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Test_TestEmptyMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Test_TestEmptyMessage) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
